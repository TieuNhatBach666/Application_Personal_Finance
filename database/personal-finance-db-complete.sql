-- =============================================
-- QU·∫¢N L√ù T√ÄI CH√çNH C√Å NH√ÇN - DATABASE HO√ÄN CH·ªàNH
-- T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch
-- M√¥ t·∫£: File SQL ho√†n ch·ªânh ƒë·ªÉ t·∫°o database v·ªõi d·ªØ li·ªáu m·∫´u
-- Ng∆∞·ªùi kh√°c ch·ªâ c·∫ßn ch·∫°y file n√†y trong SSMS l√† c√≥ th·ªÉ s·ª≠ d·ª•ng ngay
-- =============================================

USE master;
GO

-- X√≥a database n·∫øu ƒë√£ t·ªìn t·∫°i
IF EXISTS (SELECT name FROM sys.databases WHERE name = 'PersonalFinanceDB')
BEGIN
    ALTER DATABASE PersonalFinanceDB SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE PersonalFinanceDB;
    PRINT '‚úÖ X√≥a database PersonalFinanceDB c≈© (n·∫øu c√≥)';
END
GO

-- T·∫°o database m·ªõi
CREATE DATABASE PersonalFinanceDB;
PRINT '‚úÖ T·∫°o database PersonalFinanceDB m·ªõi';
GO

USE PersonalFinanceDB;
GO

-- T·∫°o b·∫£ng Users
CREATE TABLE Users (
    UserID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    Email NVARCHAR(255) UNIQUE NOT NULL,
    PasswordHash NVARCHAR(255) NOT NULL,
    FirstName NVARCHAR(100) NOT NULL,
    LastName NVARCHAR(100) NOT NULL,
    PhoneNumber NVARCHAR(20),
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    IsActive BIT DEFAULT 1
);
PRINT '‚úÖ T·∫°o b·∫£ng Users';

-- T·∫°o b·∫£ng Categories
CREATE TABLE Categories (
    CategoryID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NULL, -- NULL cho categories m·∫∑c ƒë·ªãnh
    CategoryName NVARCHAR(100) NOT NULL,
    CategoryType NVARCHAR(20) CHECK (CategoryType IN ('Income', 'Expense')) NOT NULL,
    IconName NVARCHAR(50) DEFAULT 'default',
    ColorCode NVARCHAR(7) DEFAULT '#3498db',
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    IsActive BIT DEFAULT 1,
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
PRINT '‚úÖ T·∫°o b·∫£ng Categories';

-- T·∫°o b·∫£ng Transactions
CREATE TABLE Transactions (
    TransactionID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    Amount DECIMAL(15,2) NOT NULL,
    Type NVARCHAR(20) CHECK (Type IN ('Income', 'Expense')) NOT NULL,
    Date DATE NOT NULL,
    Description NVARCHAR(500),
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);
PRINT '‚úÖ T·∫°o b·∫£ng Transactions';

-- T·∫°o b·∫£ng Budgets
CREATE TABLE Budgets (
    BudgetID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    Amount DECIMAL(15,2) NOT NULL,
    Period NVARCHAR(20) CHECK (Period IN ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')) NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NOT NULL,
    SpentAmount DECIMAL(15,2) DEFAULT 0,
    WarningThreshold DECIMAL(5,2) DEFAULT 70.00 CHECK (WarningThreshold BETWEEN 0 AND 100),
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    IsActive BIT DEFAULT 1,
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);
PRINT '‚úÖ T·∫°o b·∫£ng Budgets';

-- T·∫°o b·∫£ng UserSettings
CREATE TABLE UserSettings (
    SettingID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    SettingKey NVARCHAR(100) NOT NULL,
    SettingValue NVARCHAR(MAX) NOT NULL,
    SettingType NVARCHAR(20) NOT NULL DEFAULT 'string',
    Category NVARCHAR(50) NOT NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    UNIQUE (UserID, SettingKey)
);
PRINT '‚úÖ T·∫°o b·∫£ng UserSettings';

-- T·∫°o b·∫£ng Notifications
CREATE TABLE Notifications (
    NotificationID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    Title NVARCHAR(200) NOT NULL,
    Message NVARCHAR(MAX) NOT NULL,
    Type NVARCHAR(50) NOT NULL,
    Priority NVARCHAR(20) NOT NULL DEFAULT 'medium',
    IsRead BIT DEFAULT 0,
    IsArchived BIT DEFAULT 0,
    ActionUrl NVARCHAR(500) NULL,
    ExpiresAt DATETIME2 NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    ReadAt DATETIME2 NULL,
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
PRINT '‚úÖ T·∫°o b·∫£ng Notifications';

-- T·∫°o b·∫£ng RecurringTransactions
CREATE TABLE RecurringTransactions (
    RecurringID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    Description NVARCHAR(255) NOT NULL,
    Amount DECIMAL(15,2) NOT NULL,
    Type NVARCHAR(10) CHECK (Type IN ('Income', 'Expense')) NOT NULL,
    Frequency NVARCHAR(20) CHECK (Frequency IN ('Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly')) NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NULL,
    NextDueDate DATE NOT NULL,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID) ON DELETE CASCADE
);
PRINT '‚úÖ T·∫°o b·∫£ng RecurringTransactions';

-- T·∫°o b·∫£ng BackupHistory
CREATE TABLE BackupHistory (
    BackupID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    BackupType NVARCHAR(20) NOT NULL,
    BackupSize BIGINT NULL,
    Status NVARCHAR(20) NOT NULL DEFAULT 'pending',
    ErrorMessage NVARCHAR(MAX) NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    CompletedAt DATETIME2 NULL,
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
PRINT '‚úÖ T·∫°o b·∫£ng BackupHistory';

-- T·∫°o b·∫£ng RecurringTransactionHistory
CREATE TABLE RecurringTransactionHistory (
    HistoryID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    RecurringID UNIQUEIDENTIFIER NOT NULL,
    TransactionID UNIQUEIDENTIFIER NOT NULL,
    GeneratedDate DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (RecurringID) REFERENCES RecurringTransactions(RecurringID) ON DELETE CASCADE,
    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID) ON DELETE CASCADE
);
PRINT '‚úÖ T·∫°o b·∫£ng RecurringTransactionHistory';

-- T·∫°o indexes ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
CREATE INDEX IX_Transactions_UserID_Date ON Transactions(UserID, Date DESC);
CREATE INDEX IX_Transactions_CategoryID ON Transactions(CategoryID);
CREATE INDEX IX_Transactions_Type_Date ON Transactions(Type, Date DESC);
CREATE INDEX IX_Categories_UserID_Type ON Categories(UserID, CategoryType);
CREATE INDEX IX_Categories_Type_Active ON Categories(CategoryType, IsActive);
CREATE INDEX IX_Budgets_UserID_Period ON Budgets(UserID, Period);
CREATE INDEX IX_Budgets_CategoryID ON Budgets(CategoryID);
CREATE INDEX IX_Budgets_StartDate_EndDate ON Budgets(StartDate, EndDate);
CREATE INDEX IX_UserSettings_UserID_Category ON UserSettings(UserID, Category);
CREATE INDEX IX_Notifications_UserID_IsRead_CreatedAt ON Notifications(UserID, IsRead, CreatedAt DESC);
CREATE INDEX IX_Notifications_Type_Priority ON Notifications(Type, Priority);
CREATE INDEX IX_RecurringTransactions_UserID ON RecurringTransactions(UserID);
CREATE INDEX IX_RecurringTransactions_NextDueDate ON RecurringTransactions(NextDueDate);
CREATE INDEX IX_RecurringTransactions_IsActive ON RecurringTransactions(IsActive);
CREATE INDEX IX_BackupHistory_UserID_CreatedAt ON BackupHistory(UserID, CreatedAt DESC);
PRINT '‚úÖ T·∫°o indexes ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t';

-- T·∫°o stored procedures
PRINT 'üîß T·∫°o stored procedures...';

-- Stored Procedure: T·∫°o categories m·∫∑c ƒë·ªãnh cho user m·ªõi
CREATE PROCEDURE sp_CreateDefaultCategoriesForUser
    @UserID UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    -- Copy default categories (where UserID is NULL) for the new user
    INSERT INTO Categories (UserID, CategoryName, CategoryType, IconName, ColorCode, CreatedAt, IsActive)
    SELECT
        @UserID,
        CategoryName,
        CategoryType,
        IconName,
        ColorCode,
        GETUTCDATE(),
        1
    FROM Categories
    WHERE UserID IS NULL;

    SELECT @@ROWCOUNT as CategoriesCreated;
    PRINT 'Default categories created for UserID: ' + CAST(@UserID AS NVARCHAR(36));
END
GO

-- Stored Procedure: C·∫≠p nh·∫≠t s·ªë ti·ªÅn ƒë√£ chi trong budget
CREATE PROCEDURE sp_UpdateBudgetSpentAmount
    @UserID UNIQUEIDENTIFIER,
    @CategoryID UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;

    -- C·∫≠p nh·∫≠t t·∫•t c·∫£ budgets active c·ªßa user v√† category
    UPDATE b
    SET SpentAmount = ISNULL(spent.TotalSpent, 0),
        UpdatedAt = GETUTCDATE()
    FROM Budgets b
    LEFT JOIN (
        SELECT
            t.CategoryID,
            SUM(t.Amount) as TotalSpent
        FROM Transactions t
        WHERE t.UserID = @UserID
            AND t.CategoryID = @CategoryID
            AND t.Type = 'Expense'
        GROUP BY t.CategoryID
    ) spent ON b.CategoryID = spent.CategoryID
    WHERE b.UserID = @UserID
        AND b.CategoryID = @CategoryID
        AND b.IsActive = 1;
END
GO

-- Stored Procedure: L·∫•y c√†i ƒë·∫∑t ng∆∞·ªùi d√πng
CREATE PROCEDURE sp_GetUserSettings
    @userId UNIQUEIDENTIFIER,
    @category NVARCHAR(50) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        SettingID,
        SettingKey,
        SettingValue,
        SettingType,
        Category,
        CreatedAt,
        UpdatedAt
    FROM UserSettings
    WHERE UserID = @userId
        AND (@category IS NULL OR Category = @category)
    ORDER BY Category, SettingKey;
END
GO

-- Stored Procedure: L·∫•y th√¥ng b√°o ng∆∞·ªùi d√πng
CREATE PROCEDURE sp_GetUserNotifications
    @userId UNIQUEIDENTIFIER,
    @isRead BIT = NULL,
    @type NVARCHAR(50) = NULL,
    @limit INT = 50,
    @offset INT = 0
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        NotificationID,
        Title,
        Message,
        Type,
        Priority,
        IsRead,
        IsArchived,
        ActionUrl,
        ExpiresAt,
        CreatedAt,
        ReadAt,
        -- T√≠nh to√°n th·ªùi gian t∆∞∆°ng ƒë·ªëi
        CASE
            WHEN DATEDIFF(MINUTE, CreatedAt, GETUTCDATE()) < 60
                THEN CAST(DATEDIFF(MINUTE, CreatedAt, GETUTCDATE()) AS NVARCHAR) + N' ph√∫t tr∆∞·ªõc'
            WHEN DATEDIFF(HOUR, CreatedAt, GETUTCDATE()) < 24
                THEN CAST(DATEDIFF(HOUR, CreatedAt, GETUTCDATE()) AS NVARCHAR) + N' gi·ªù tr∆∞·ªõc'
            WHEN DATEDIFF(DAY, CreatedAt, GETUTCDATE()) < 7
                THEN CAST(DATEDIFF(DAY, CreatedAt, GETUTCDATE()) AS NVARCHAR) + N' ng√†y tr∆∞·ªõc'
            ELSE FORMAT(CreatedAt, 'dd/MM/yyyy HH:mm')
        END as TimeAgo
    FROM Notifications
    WHERE UserID = @userId
        AND (@isRead IS NULL OR IsRead = @isRead)
        AND (@type IS NULL OR Type = @type)
        AND IsArchived = 0
        AND (ExpiresAt IS NULL OR ExpiresAt > GETUTCDATE())
    ORDER BY
        CASE Priority
            WHEN 'urgent' THEN 1
            WHEN 'high' THEN 2
            WHEN 'medium' THEN 3
            WHEN 'low' THEN 4
        END,
        CreatedAt DESC
    OFFSET @offset ROWS
    FETCH NEXT @limit ROWS ONLY;
END
GO

-- Stored Procedure: T·∫°o th√¥ng b√°o m·ªõi
CREATE PROCEDURE sp_CreateNotification
    @userId UNIQUEIDENTIFIER,
    @title NVARCHAR(200),
    @message NVARCHAR(MAX),
    @type NVARCHAR(50),
    @priority NVARCHAR(20) = 'medium',
    @actionUrl NVARCHAR(500) = NULL,
    @expiresAt DATETIME2 = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @notificationId UNIQUEIDENTIFIER = NEWID();

    INSERT INTO Notifications (
        NotificationID, UserID, Title, Message, Type, Priority, ActionUrl, ExpiresAt
    ) VALUES (
        @notificationId, @userId, @title, @message, @type, @priority, @actionUrl, @expiresAt
    );

    SELECT @notificationId as NotificationID;
END
GO

-- Stored Procedure: X·ª≠ l√Ω giao d·ªãch ƒë·ªãnh k·ª≥
CREATE PROCEDURE sp_ProcessRecurringTransactions
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Today DATE = CAST(GETUTCDATE() AS DATE);
    DECLARE @ProcessedCount INT = 0;

    -- Cursor ƒë·ªÉ x·ª≠ l√Ω t·ª´ng giao d·ªãch ƒë·ªãnh k·ª≥ ƒë·∫øn h·∫°n
    DECLARE recurring_cursor CURSOR FOR
    SELECT
        rt.RecurringID,
        rt.UserID,
        rt.CategoryID,
        rt.Description,
        rt.Amount,
        rt.Type,
        rt.Frequency,
        rt.NextDueDate
    FROM RecurringTransactions rt
    WHERE rt.IsActive = 1
      AND rt.NextDueDate <= @Today
      AND (rt.EndDate IS NULL OR rt.EndDate >= @Today);

    DECLARE @RecurringID UNIQUEIDENTIFIER,
            @UserID UNIQUEIDENTIFIER,
            @CategoryID UNIQUEIDENTIFIER,
            @Description NVARCHAR(255),
            @Amount DECIMAL(15,2),
            @Type NVARCHAR(10),
            @Frequency NVARCHAR(20),
            @NextDueDate DATE;

    OPEN recurring_cursor;
    FETCH NEXT FROM recurring_cursor INTO
        @RecurringID, @UserID, @CategoryID, @Description, @Amount, @Type, @Frequency, @NextDueDate;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- T·∫°o giao d·ªãch m·ªõi
        DECLARE @NewTransactionID UNIQUEIDENTIFIER = NEWID();

        INSERT INTO Transactions (
            TransactionID, UserID, CategoryID, Description, Amount, Type, Date, CreatedAt
        ) VALUES (
            @NewTransactionID, @UserID, @CategoryID, @Description, @Amount, @Type, @Today, GETUTCDATE()
        );

        -- Ghi l·∫°i l·ªãch s·ª≠
        INSERT INTO RecurringTransactionHistory (
            RecurringID, TransactionID
        ) VALUES (
            @RecurringID, @NewTransactionID
        );

        -- T√≠nh to√°n ng√†y ƒë·∫øn h·∫°n ti·∫øp theo
        DECLARE @NewNextDueDate DATE;

        IF @Frequency = 'Daily'
            SET @NewNextDueDate = DATEADD(DAY, 1, @NextDueDate);
        ELSE IF @Frequency = 'Weekly'
            SET @NewNextDueDate = DATEADD(WEEK, 1, @NextDueDate);
        ELSE IF @Frequency = 'Monthly'
            SET @NewNextDueDate = DATEADD(MONTH, 1, @NextDueDate);
        ELSE IF @Frequency = 'Quarterly'
            SET @NewNextDueDate = DATEADD(QUARTER, 1, @NextDueDate);
        ELSE IF @Frequency = 'Yearly'
            SET @NewNextDueDate = DATEADD(YEAR, 1, @NextDueDate);

        -- C·∫≠p nh·∫≠t ng√†y ƒë·∫øn h·∫°n ti·∫øp theo
        UPDATE RecurringTransactions
        SET NextDueDate = @NewNextDueDate,
            UpdatedAt = GETUTCDATE()
        WHERE RecurringID = @RecurringID;

        -- C·∫≠p nh·∫≠t budget n·∫øu c√≥
        EXEC sp_UpdateBudgetSpentAmount @UserID, @CategoryID;

        SET @ProcessedCount = @ProcessedCount + 1;

        FETCH NEXT FROM recurring_cursor INTO
            @RecurringID, @UserID, @CategoryID, @Description, @Amount, @Type, @Frequency, @NextDueDate;
    END;

    CLOSE recurring_cursor;
    DEALLOCATE recurring_cursor;

    -- Tr·∫£ v·ªÅ k·∫øt qu·∫£
    SELECT @ProcessedCount as ProcessedTransactions;
END
GO

PRINT '‚úÖ T·∫°o stored procedures';

-- T·∫°o functions v√† views
PRINT 'üìä T·∫°o functions v√† views...';

-- Function: T√≠nh to√°n ti·∫øn ƒë·ªô budget
CREATE FUNCTION fn_GetBudgetProgress(@BudgetID UNIQUEIDENTIFIER)
RETURNS TABLE
AS
RETURN
(
    SELECT
        b.BudgetID,
        b.Amount as BudgetAmount,
        ISNULL(SUM(t.Amount), 0) as SpentAmount,
        CASE
            WHEN b.Amount > 0
            THEN ROUND((ISNULL(SUM(t.Amount), 0) / b.Amount) * 100, 2)
            ELSE 0
        END as PercentageUsed,
        CASE
            WHEN ISNULL(SUM(t.Amount), 0) >= b.Amount THEN 'Over Budget'
            WHEN (ISNULL(SUM(t.Amount), 0) / b.Amount) * 100 >= 90 THEN 'Danger'
            WHEN (ISNULL(SUM(t.Amount), 0) / b.Amount) * 100 >= b.WarningThreshold THEN 'Warning'
            ELSE 'On Track'
        END as Status
    FROM Budgets b
    LEFT JOIN Transactions t ON b.CategoryID = t.CategoryID
        AND b.UserID = t.UserID
        AND t.Date BETWEEN b.StartDate AND b.EndDate
        AND t.Type = 'Expense'
    WHERE b.BudgetID = @BudgetID
    GROUP BY b.BudgetID, b.Amount, b.WarningThreshold
);
GO

-- View: T√≥m t·∫Øt giao d·ªãch
CREATE VIEW vw_TransactionSummary AS
SELECT
    t.UserID,
    YEAR(t.Date) as Year,
    MONTH(t.Date) as Month,
    t.Type,
    c.CategoryName,
    c.ColorCode,
    COUNT(*) as TransactionCount,
    SUM(t.Amount) as TotalAmount,
    AVG(t.Amount) as AverageAmount
FROM Transactions t
INNER JOIN Categories c ON t.CategoryID = c.CategoryID
GROUP BY t.UserID, YEAR(t.Date), MONTH(t.Date),
         t.Type, c.CategoryName, c.ColorCode;
GO

-- View: T√≥m t·∫Øt budget
CREATE VIEW vw_BudgetSummary AS
SELECT
    b.BudgetID,
    b.UserID,
    c.CategoryName,
    c.ColorCode,
    b.Amount as BudgetAmount,
    b.SpentAmount,
    b.Period,
    b.StartDate,
    b.EndDate,
    b.WarningThreshold,
    CASE
        WHEN b.Amount > 0
        THEN ROUND((b.SpentAmount / b.Amount) * 100, 2)
        ELSE 0
    END as PercentageUsed,
    CASE
        WHEN b.SpentAmount >= b.Amount THEN 'Over Budget'
        WHEN (b.SpentAmount / b.Amount) * 100 >= 90 THEN 'Danger'
        WHEN (b.SpentAmount / b.Amount) * 100 >= b.WarningThreshold THEN 'Warning'
        ELSE 'On Track'
    END as Status,
    b.IsActive
FROM Budgets b
INNER JOIN Categories c ON b.CategoryID = c.CategoryID;
GO

PRINT '‚úÖ T·∫°o functions v√† views';

-- Ch√®n d·ªØ li·ªáu m·∫´u
PRINT 'üìù Ch√®n d·ªØ li·ªáu m·∫´u...';

-- Ch√®n categories m·∫∑c ƒë·ªãnh cho Income
INSERT INTO Categories (UserID, CategoryName, CategoryType, IconName, ColorCode) VALUES
(NULL, N'L∆∞∆°ng', 'Income', 'salary', '#27ae60'),
(NULL, N'Th∆∞·ªüng', 'Income', 'bonus', '#f39c12'),
(NULL, N'Ph·ª• c·∫•p', 'Income', 'allowance', '#3498db'),
(NULL, N'ƒê·∫ßu t∆∞', 'Income', 'investment', '#9b59b6'),
(NULL, N'Kinh doanh', 'Income', 'business', '#e67e22'),
(NULL, N'Thu nh·∫≠p kh√°c', 'Income', 'other', '#95a5a6');

-- Ch√®n categories m·∫∑c ƒë·ªãnh cho Expense
INSERT INTO Categories (UserID, CategoryName, CategoryType, IconName, ColorCode) VALUES
(NULL, N'ƒÇn u·ªëng', 'Expense', 'food', '#e74c3c'),
(NULL, N'ƒêi l·∫°i', 'Expense', 'transport', '#3498db'),
(NULL, N'H·ªçc t·∫≠p', 'Expense', 'education', '#9b59b6'),
(NULL, N'Gi·∫£i tr√≠', 'Expense', 'entertainment', '#f39c12'),
(NULL, N'Y t·∫ø', 'Expense', 'healthcare', '#e67e22'),
(NULL, N'Mua s·∫Øm', 'Expense', 'shopping', '#e91e63'),
(NULL, N'H√≥a ƒë∆°n', 'Expense', 'bills', '#607d8b'),
(NULL, N'Nh√† ·ªü', 'Expense', 'housing', '#795548'),
(NULL, N'Qu·∫ßn √°o', 'Expense', 'clothing', '#ff5722'),
(NULL, N'Chi ti√™u kh√°c', 'Expense', 'other', '#95a5a6');

PRINT '‚úÖ Ch√®n categories m·∫∑c ƒë·ªãnh';

-- Ch√®n user m·∫´u
DECLARE @UserID UNIQUEIDENTIFIER = NEWID();
INSERT INTO Users (UserID, Email, PasswordHash, FirstName, LastName, PhoneNumber) 
VALUES (@UserID, 'nguoidung@vidu.com', 'matkhau_hash', N'Nguy·ªÖn', N'VƒÉn A', '0123456789');
PRINT '‚úÖ Ch√®n user m·∫´u';

-- Ch√®n categories cho user
INSERT INTO Categories (UserID, CategoryName, CategoryType, IconName, ColorCode) 
SELECT @UserID, CategoryName, CategoryType, IconName, ColorCode 
FROM Categories WHERE UserID IS NULL;
PRINT '‚úÖ Ch√®n categories cho user';

-- Ch√®n transactions m·∫´u
DECLARE @SalaryCategoryID UNIQUEIDENTIFIER;
DECLARE @FoodCategoryID UNIQUEIDENTIFIER;
DECLARE @TransportCategoryID UNIQUEIDENTIFIER;

SELECT @SalaryCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'L∆∞∆°ng';
SELECT @FoodCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'ƒÇn u·ªëng';
SELECT @TransportCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'ƒêi l·∫°i';

INSERT INTO Transactions (UserID, CategoryID, Amount, Type, Date, Description) VALUES
(@UserID, @SalaryCategoryID, 15000000, 'Income', '2025-09-01', N'L∆∞∆°ng th√°ng 9'),
(@UserID, @FoodCategoryID, 250000, 'Expense', '2025-09-02', N'ƒÇn s√°ng'),
(@UserID, @TransportCategoryID, 50000, 'Expense', '2025-09-02', N'ƒêi xe bus'),
(@UserID, @FoodCategoryID, 180000, 'Expense', '2025-09-03', N'ƒÇn tr∆∞a');
PRINT '‚úÖ Ch√®n transactions m·∫´u';

-- Ch√®n budgets m·∫´u
INSERT INTO Budgets (UserID, CategoryID, Amount, Period, StartDate, EndDate) 
VALUES (@UserID, @FoodCategoryID, 2000000, 'monthly', '2025-09-01', '2025-09-30');
PRINT '‚úÖ Ch√®n budgets m·∫´u';

-- Ch√®n settings m·∫´u
INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category) 
VALUES 
(@UserID, 'currency', 'VND', 'string', 'general'),
(@UserID, 'language', 'vi', 'string', 'general'),
(@UserID, 'theme', 'light', 'string', 'appearance');
PRINT '‚úÖ Ch√®n settings m·∫´u';

-- Ch√®n notifications m·∫´u
INSERT INTO Notifications (UserID, Title, Message, Type, Priority) 
VALUES 
(@UserID, N'Ch√†o m·ª´ng b·∫°n', N'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng Qu·∫£n L√Ω T√†i Ch√≠nh C√° Nh√¢n', 'welcome', 'medium'),
(@UserID, N'V∆∞·ª£t ng√¢n s√°ch', N'B·∫°n ƒë√£ v∆∞·ª£t qu√° ng√¢n s√°ch cho danh m·ª•c ƒÇn u·ªëng', 'budget', 'high');
PRINT '‚úÖ Ch√®n notifications m·∫´u';

-- Ho√†n t·∫•t
PRINT '';
PRINT 'üéâ DATABASE HO√ÄN CH·ªàNH ƒê√É ƒê∆Ø·ª¢C T·∫†O!';
PRINT '';
PRINT 'üìã T√ìM T·∫ÆT:';
PRINT '   ‚úÖ Database: PersonalFinanceDB';
PRINT '   ‚úÖ B·∫£ng ch√≠nh: 9 b·∫£ng';
PRINT '   ‚úÖ Indexes: ƒê√£ t·ªëi ∆∞u';
PRINT '   ‚úÖ Stored Procedures: 6 procedures';
PRINT '   ‚úÖ Views & Functions: 3 items';
PRINT '   ‚úÖ D·ªØ li·ªáu m·∫´u: 1 user, 16 categories, 4 transactions, 1 budget, 3 settings, 2 notifications';
PRINT '';
PRINT 'üöÄ S·∫¥N S√ÄNG S·ª¨ D·ª§NG!';
PRINT 'üìß T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch';
PRINT 'üìÖ Ho√†n th√†nh: ' + CONVERT(NVARCHAR, GETDATE(), 120);
PRINT '';
PRINT 'üëâ Ng∆∞·ªùi kh√°c ch·ªâ c·∫ßn m·ªü file n√†y trong SSMS v√† ch·∫°y (Execute) l√† c√≥ th·ªÉ s·ª≠ d·ª•ng ngay!';
PRINT '';