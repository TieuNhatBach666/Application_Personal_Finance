-- =============================================
-- PERSONAL FINANCE MANAGER - COMPLETE DATABASE SETUP
-- T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch
-- M√¥ t·∫£: File SQL t·ªïng h·ª£p ƒë·ªÉ thi·∫øt l·∫≠p ho√†n ch·ªânh database
-- =============================================

-- C·∫•u h√¨nh k·∫øt n·ªëi:
-- Server: TIEUNHATBACH\TIEUNHATBACH
-- Login: sa / Password: 123456
-- Database: PersonalFinanceDB

USE master;
GO

PRINT 'üöÄ B·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p Personal Finance Manager Database...';
PRINT 'üìÖ Th·ªùi gian: ' + CONVERT(NVARCHAR, GETDATE(), 120);
PRINT 'üë§ T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch';
PRINT '';

-- =============================================
-- B∆Ø·ªöC 1: T·∫†O DATABASE
-- =============================================

PRINT 'üìä B∆Ø·ªöC 1: T·∫°o Database...';

-- T·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'PersonalFinanceDB')
BEGIN
    CREATE DATABASE PersonalFinanceDB;
    PRINT '‚úÖ Database PersonalFinanceDB ƒë√£ ƒë∆∞·ª£c t·∫°o';
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è Database PersonalFinanceDB ƒë√£ t·ªìn t·∫°i';
END
GO

USE PersonalFinanceDB;
GO

-- =============================================
-- B∆Ø·ªöC 2: X√ìA C√ÅC B·∫¢NG C≈® (N·∫æU C√ì)
-- =============================================

PRINT 'üóëÔ∏è B∆Ø·ªöC 2: X√≥a c√°c b·∫£ng c≈© ƒë·ªÉ thi·∫øt l·∫≠p l·∫°i...';

-- X√≥a theo th·ª© t·ª± ƒë·ªÉ tr√°nh l·ªói foreign key
IF OBJECT_ID('RecurringTransactionHistory', 'U') IS NOT NULL DROP TABLE RecurringTransactionHistory;
IF OBJECT_ID('RecurringTransactions', 'U') IS NOT NULL DROP TABLE RecurringTransactions;
IF OBJECT_ID('BackupHistory', 'U') IS NOT NULL DROP TABLE BackupHistory;
IF OBJECT_ID('Notifications', 'U') IS NOT NULL DROP TABLE Notifications;
IF OBJECT_ID('UserSettings', 'U') IS NOT NULL DROP TABLE UserSettings;
IF OBJECT_ID('Budgets', 'U') IS NOT NULL DROP TABLE Budgets;
IF OBJECT_ID('Transactions', 'U') IS NOT NULL DROP TABLE Transactions;
IF OBJECT_ID('Categories', 'U') IS NOT NULL DROP TABLE Categories;
IF OBJECT_ID('Users', 'U') IS NOT NULL DROP TABLE Users;

-- X√≥a c√°c views v√† functions c≈©
IF OBJECT_ID('vw_TransactionSummary', 'V') IS NOT NULL DROP VIEW vw_TransactionSummary;
IF OBJECT_ID('fn_GetBudgetProgress', 'TF') IS NOT NULL DROP FUNCTION fn_GetBudgetProgress;

-- X√≥a c√°c stored procedures c≈©
IF OBJECT_ID('sp_CreateDefaultCategoriesForUser', 'P') IS NOT NULL DROP PROCEDURE sp_CreateDefaultCategoriesForUser;
IF OBJECT_ID('sp_ProcessRecurringTransactions', 'P') IS NOT NULL DROP PROCEDURE sp_ProcessRecurringTransactions;
IF OBJECT_ID('sp_DailyRecurringTransactionJob', 'P') IS NOT NULL DROP PROCEDURE sp_DailyRecurringTransactionJob;
IF OBJECT_ID('sp_GetUserSettings', 'P') IS NOT NULL DROP PROCEDURE sp_GetUserSettings;
IF OBJECT_ID('sp_GetUserNotifications', 'P') IS NOT NULL DROP PROCEDURE sp_GetUserNotifications;
IF OBJECT_ID('sp_CreateNotification', 'P') IS NOT NULL DROP PROCEDURE sp_CreateNotification;

PRINT '‚úÖ ƒê√£ x√≥a c√°c b·∫£ng v√† objects c≈©';

-- =============================================
-- B∆Ø·ªöC 3: T·∫†O C√ÅC B·∫¢NG CH√çNH
-- =============================================

PRINT 'üèóÔ∏è B∆Ø·ªöC 3: T·∫°o c√°c b·∫£ng ch√≠nh...';

-- B·∫£ng Users - Ng∆∞·ªùi d√πng
CREATE TABLE Users (
    UserID INT IDENTITY(1,1) PRIMARY KEY,
    Email NVARCHAR(255) UNIQUE NOT NULL,
    PasswordHash NVARCHAR(255) NOT NULL,
    FullName NVARCHAR(255) NOT NULL,
    PhoneNumber NVARCHAR(20),
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE(),
    IsActive BIT DEFAULT 1
);
PRINT '‚úÖ B·∫£ng Users ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Categories - Danh m·ª•c thu chi
CREATE TABLE Categories (
    CategoryID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID) ON DELETE CASCADE,
    CategoryName NVARCHAR(100) NOT NULL,
    CategoryType NVARCHAR(20) CHECK (CategoryType IN ('Income', 'Expense')) NOT NULL,
    IconName NVARCHAR(50) DEFAULT 'default',
    ColorCode NVARCHAR(7) DEFAULT '#3498db',
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    IsActive BIT DEFAULT 1
);
PRINT '‚úÖ B·∫£ng Categories ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Transactions - Giao d·ªãch
CREATE TABLE Transactions (
    TransactionID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID) ON DELETE CASCADE,
    CategoryID INT FOREIGN KEY REFERENCES Categories(CategoryID),
    Amount DECIMAL(15,2) NOT NULL,
    TransactionType NVARCHAR(20) CHECK (TransactionType IN ('Income', 'Expense')) NOT NULL,
    TransactionDate DATE NOT NULL,
    Description NVARCHAR(500),
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE()
);
PRINT '‚úÖ B·∫£ng Transactions ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Budgets - Ng√¢n s√°ch
CREATE TABLE Budgets (
    BudgetID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID) ON DELETE CASCADE,
    CategoryID INT FOREIGN KEY REFERENCES Categories(CategoryID),
    BudgetAmount DECIMAL(15,2) NOT NULL,
    Period NVARCHAR(20) CHECK (Period IN ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')) NOT NULL DEFAULT 'monthly',
    BudgetMonth INT NOT NULL CHECK (BudgetMonth BETWEEN 1 AND 12),
    BudgetYear INT NOT NULL CHECK (BudgetYear >= 2020),
    WarningThreshold DECIMAL(5,2) DEFAULT 70.00 CHECK (WarningThreshold BETWEEN 0 AND 100),
    SpentAmount DECIMAL(15,2) DEFAULT 0.00,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE(),
    UNIQUE(UserID, CategoryID, BudgetMonth, BudgetYear)
);
PRINT '‚úÖ B·∫£ng Budgets ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng UserSettings - C√†i ƒë·∫∑t ng∆∞·ªùi d√πng
CREATE TABLE UserSettings (
    SettingID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID) ON DELETE CASCADE,
    SettingKey NVARCHAR(100) NOT NULL,
    SettingValue NVARCHAR(MAX) NOT NULL,
    SettingType NVARCHAR(20) NOT NULL DEFAULT 'string',
    Category NVARCHAR(50) NOT NULL,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE(),
    UNIQUE(UserID, SettingKey)
);
PRINT '‚úÖ B·∫£ng UserSettings ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Notifications - Th√¥ng b√°o
CREATE TABLE Notifications (
    NotificationID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID) ON DELETE CASCADE,
    Title NVARCHAR(200) NOT NULL,
    Message NVARCHAR(MAX) NOT NULL,
    Type NVARCHAR(50) NOT NULL,
    Priority NVARCHAR(20) NOT NULL DEFAULT 'medium',
    IsRead BIT DEFAULT 0,
    IsArchived BIT DEFAULT 0,
    ActionUrl NVARCHAR(500) NULL,
    ExpiresAt DATETIME2 NULL,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    ReadAt DATETIME2 NULL
);
PRINT '‚úÖ B·∫£ng Notifications ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng BackupHistory - L·ªãch s·ª≠ sao l∆∞u
CREATE TABLE BackupHistory (
    BackupID INT IDENTITY(1,1) PRIMARY KEY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID) ON DELETE CASCADE,
    BackupType NVARCHAR(20) NOT NULL,
    BackupSize BIGINT NULL,
    Status NVARCHAR(20) NOT NULL DEFAULT 'pending',
    ErrorMessage NVARCHAR(MAX) NULL,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    CompletedAt DATETIME2 NULL
);
PRINT '‚úÖ B·∫£ng BackupHistory ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- =============================================
-- B∆Ø·ªöC 4: T·∫†O INDEXES CHO HI·ªÜU SU·∫§T
-- =============================================

PRINT 'üìä B∆Ø·ªöC 4: T·∫°o indexes cho hi·ªáu su·∫•t...';

-- Indexes cho b·∫£ng Transactions
CREATE INDEX IX_Transactions_UserID_Date ON Transactions(UserID, TransactionDate DESC);
CREATE INDEX IX_Transactions_CategoryID ON Transactions(CategoryID);
PRINT '‚úÖ Indexes cho Transactions ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- Indexes cho b·∫£ng Categories
CREATE INDEX IX_Categories_UserID_Type ON Categories(UserID, CategoryType);
PRINT '‚úÖ Indexes cho Categories ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- Indexes cho b·∫£ng Budgets
CREATE INDEX IX_Budgets_UserID_Month_Year ON Budgets(UserID, BudgetMonth, BudgetYear);
PRINT '‚úÖ Indexes cho Budgets ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- Indexes cho b·∫£ng UserSettings
CREATE INDEX IX_UserSettings_UserID_Key ON UserSettings(UserID, SettingKey);
CREATE INDEX IX_UserSettings_UserID_Category ON UserSettings(UserID, Category);
PRINT '‚úÖ Indexes cho UserSettings ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- Indexes cho b·∫£ng Notifications
CREATE INDEX IX_Notifications_UserID_Read ON Notifications(UserID, IsRead);
CREATE INDEX IX_Notifications_UserID_IsRead_CreatedAt ON Notifications(UserID, IsRead, CreatedAt DESC);
PRINT '‚úÖ Indexes cho Notifications ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- Indexes cho b·∫£ng BackupHistory
CREATE INDEX IX_BackupHistory_UserID_CreatedAt ON BackupHistory(UserID, CreatedAt DESC);
PRINT '‚úÖ Indexes cho BackupHistory ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- =============================================
-- B∆Ø·ªöC 5: CH√àN D·ªÆ LI·ªÜU M·∫∂C ƒê·ªäNH
-- =============================================

PRINT 'üìù B∆Ø·ªöC 5: Ch√®n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh...';

-- Ch√®n default categories (UserID = NULL ƒë·ªÉ l√†m template)
INSERT INTO Categories (UserID, CategoryName, CategoryType, IconName, ColorCode) VALUES
-- Categories Thu nh·∫≠p
(NULL, N'L∆∞∆°ng', 'Income', 'salary', '#27ae60'),
(NULL, N'Th∆∞·ªüng', 'Income', 'bonus', '#f39c12'),
(NULL, N'Ph·ª• c·∫•p', 'Income', 'allowance', '#3498db'),
(NULL, N'ƒê·∫ßu t∆∞', 'Income', 'investment', '#9b59b6'),
(NULL, N'Kinh doanh', 'Income', 'business', '#e67e22'),
(NULL, N'Thu nh·∫≠p kh√°c', 'Income', 'other', '#95a5a6'),
-- Categories Chi ti√™u
(NULL, N'ƒÇn u·ªëng', 'Expense', 'food', '#e74c3c'),
(NULL, N'ƒêi l·∫°i', 'Expense', 'transport', '#3498db'),
(NULL, N'H·ªçc t·∫≠p', 'Expense', 'education', '#9b59b6'),
(NULL, N'Gi·∫£i tr√≠', 'Expense', 'entertainment', '#f39c12'),
(NULL, N'Y t·∫ø', 'Expense', 'healthcare', '#e67e22'),
(NULL, N'Mua s·∫Øm', 'Expense', 'shopping', '#e91e63'),
(NULL, N'H√≥a ƒë∆°n', 'Expense', 'bills', '#607d8b'),
(NULL, N'Nh√† ·ªü', 'Expense', 'housing', '#795548'),
(NULL, N'Qu·∫ßn √°o', 'Expense', 'clothing', '#ff5722'),
(NULL, N'Chi ti√™u kh√°c', 'Expense', 'other', '#95a5a6');

PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' default categories';

-- =============================================
-- B∆Ø·ªöC 6: T·∫†O STORED PROCEDURES
-- =============================================

PRINT 'üîß B∆Ø·ªöC 6: T·∫°o stored procedures...';
GO

-- Stored Procedure: T·∫°o default categories cho user m·ªõi
CREATE PROCEDURE sp_CreateDefaultCategoriesForUser
    @UserID INT
AS
BEGIN
    SET NOCOUNT ON;

    -- Sao ch√©p default categories (UserID = NULL) cho user m·ªõi
    INSERT INTO Categories (UserID, CategoryName, CategoryType, IconName, ColorCode, CreatedAt, IsActive)
    SELECT
        @UserID,
        CategoryName,
        CategoryType,
        IconName,
        ColorCode,
        GETDATE(),
        1
    FROM Categories
    WHERE UserID IS NULL;

    SELECT @@ROWCOUNT as CategoriesCreated;
    PRINT 'ƒê√£ t·∫°o default categories cho UserID: ' + CAST(@UserID AS NVARCHAR(10));
END
GO

PRINT '‚úÖ sp_CreateDefaultCategoriesForUser ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- Stored Procedure: L·∫•y c√†i ƒë·∫∑t ng∆∞·ªùi d√πng
CREATE PROCEDURE sp_GetUserSettings
    @userId INT,
    @category NVARCHAR(50) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        SettingID,
        SettingKey,
        SettingValue,
        SettingType,
        Category,
        CreatedAt,
        UpdatedAt
    FROM UserSettings
    WHERE UserID = @userId
        AND (@category IS NULL OR Category = @category)
    ORDER BY Category, SettingKey;
END
GO

PRINT '‚úÖ sp_GetUserSettings ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- Stored Procedure: L·∫•y th√¥ng b√°o ng∆∞·ªùi d√πng
CREATE PROCEDURE sp_GetUserNotifications
    @userId INT,
    @isRead BIT = NULL,
    @type NVARCHAR(50) = NULL,
    @limit INT = 50,
    @offset INT = 0
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        NotificationID,
        Title,
        Message,
        Type,
        Priority,
        IsRead,
        IsArchived,
        ActionUrl,
        ExpiresAt,
        CreatedAt,
        ReadAt,
        -- T√≠nh to√°n th·ªùi gian t∆∞∆°ng ƒë·ªëi
        CASE
            WHEN DATEDIFF(MINUTE, CreatedAt, GETDATE()) < 60
                THEN CAST(DATEDIFF(MINUTE, CreatedAt, GETDATE()) AS NVARCHAR) + N' ph√∫t tr∆∞·ªõc'
            WHEN DATEDIFF(HOUR, CreatedAt, GETDATE()) < 24
                THEN CAST(DATEDIFF(HOUR, CreatedAt, GETDATE()) AS NVARCHAR) + N' gi·ªù tr∆∞·ªõc'
            WHEN DATEDIFF(DAY, CreatedAt, GETDATE()) < 7
                THEN CAST(DATEDIFF(DAY, CreatedAt, GETDATE()) AS NVARCHAR) + N' ng√†y tr∆∞·ªõc'
            ELSE FORMAT(CreatedAt, 'dd/MM/yyyy HH:mm')
        END as TimeAgo
    FROM Notifications
    WHERE UserID = @userId
        AND (@isRead IS NULL OR IsRead = @isRead)
        AND (@type IS NULL OR Type = @type)
        AND IsArchived = 0
        AND (ExpiresAt IS NULL OR ExpiresAt > GETDATE())
    ORDER BY
        CASE Priority
            WHEN 'urgent' THEN 1
            WHEN 'high' THEN 2
            WHEN 'medium' THEN 3
            WHEN 'low' THEN 4
        END,
        CreatedAt DESC
    OFFSET @offset ROWS
    FETCH NEXT @limit ROWS ONLY;
END
GO

PRINT '‚úÖ sp_GetUserNotifications ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- Stored Procedure: T·∫°o th√¥ng b√°o m·ªõi
CREATE PROCEDURE sp_CreateNotification
    @userId INT,
    @title NVARCHAR(200),
    @message NVARCHAR(MAX),
    @type NVARCHAR(50),
    @priority NVARCHAR(20) = 'medium',
    @actionUrl NVARCHAR(500) = NULL,
    @expiresAt DATETIME2 = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @notificationId INT;

    INSERT INTO Notifications (
        UserID, Title, Message, Type, Priority, ActionUrl, ExpiresAt
    ) VALUES (
        @userId, @title, @message, @type, @priority, @actionUrl, @expiresAt
    );

    SET @notificationId = SCOPE_IDENTITY();
    SELECT @notificationId as NotificationID;
END
GO

PRINT '‚úÖ sp_CreateNotification ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- =============================================
-- B∆Ø·ªöC 7: T·∫†O VIEWS V√Ä FUNCTIONS
-- =============================================

PRINT 'üìä B∆Ø·ªöC 7: T·∫°o views v√† functions...';

-- Function: T√≠nh to√°n ti·∫øn ƒë·ªô ng√¢n s√°ch
CREATE FUNCTION fn_GetBudgetProgress(@BudgetID INT)
RETURNS TABLE
AS
RETURN
(
    SELECT
        b.BudgetID,
        b.BudgetAmount,
        ISNULL(SUM(t.Amount), 0) as SpentAmount,
        CASE
            WHEN b.BudgetAmount > 0
            THEN ROUND((ISNULL(SUM(t.Amount), 0) / b.BudgetAmount) * 100, 2)
            ELSE 0
        END as PercentageUsed,
        CASE
            WHEN ISNULL(SUM(t.Amount), 0) >= b.BudgetAmount THEN N'V∆∞·ª£t ng√¢n s√°ch'
            WHEN (ISNULL(SUM(t.Amount), 0) / b.BudgetAmount) * 100 >= 90 THEN N'Nguy hi·ªÉm'
            WHEN (ISNULL(SUM(t.Amount), 0) / b.BudgetAmount) * 100 >= b.WarningThreshold THEN N'C·∫£nh b√°o'
            ELSE N'B√¨nh th∆∞·ªùng'
        END as Status
    FROM Budgets b
    LEFT JOIN Transactions t ON b.CategoryID = t.CategoryID
        AND b.UserID = t.UserID
        AND MONTH(t.TransactionDate) = b.BudgetMonth
        AND YEAR(t.TransactionDate) = b.BudgetYear
        AND t.TransactionType = 'Expense'
    WHERE b.BudgetID = @BudgetID
    GROUP BY b.BudgetID, b.BudgetAmount, b.WarningThreshold
);
GO

PRINT '‚úÖ fn_GetBudgetProgress ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- View: T√≥m t·∫Øt giao d·ªãch
CREATE VIEW vw_TransactionSummary AS
SELECT
    t.UserID,
    YEAR(t.TransactionDate) as Year,
    MONTH(t.TransactionDate) as Month,
    t.TransactionType,
    c.CategoryName,
    c.ColorCode,
    COUNT(*) as TransactionCount,
    SUM(t.Amount) as TotalAmount,
    AVG(t.Amount) as AverageAmount
FROM Transactions t
INNER JOIN Categories c ON t.CategoryID = c.CategoryID
GROUP BY t.UserID, YEAR(t.TransactionDate), MONTH(t.TransactionDate),
         t.TransactionType, c.CategoryName, c.ColorCode;
GO

PRINT '‚úÖ vw_TransactionSummary ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- =============================================
-- B∆Ø·ªöC 8: T·∫†O USER DEMO V√Ä D·ªÆ LI·ªÜU M·∫™U
-- =============================================

PRINT 'üë§ B∆Ø·ªöC 8: T·∫°o user demo v√† d·ªØ li·ªáu m·∫´u...';

-- T·∫°o user demo
DECLARE @demoUserId INT;

INSERT INTO Users (Email, PasswordHash, FullName, PhoneNumber) VALUES
(N'demo@example.com', N'$2b$10$demo.hash.for.testing.purposes.only', N'Ng∆∞·ªùi d√πng Demo', N'0123456789');

SET @demoUserId = SCOPE_IDENTITY();
PRINT '‚úÖ ƒê√£ t·∫°o user demo v·ªõi ID: ' + CAST(@demoUserId AS NVARCHAR);

-- T·∫°o categories cho user demo
EXEC sp_CreateDefaultCategoriesForUser @demoUserId;

-- Ch√®n c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh cho user demo
INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category) VALUES
(@demoUserId, 'theme', 'light', 'string', 'appearance'),
(@demoUserId, 'language', 'vi', 'string', 'appearance'),
(@demoUserId, 'currency', 'VND', 'string', 'appearance'),
(@demoUserId, 'push', 'true', 'boolean', 'notifications'),
(@demoUserId, 'email', 'true', 'boolean', 'notifications'),
(@demoUserId, 'budget', 'true', 'boolean', 'notifications');

PRINT '‚úÖ ƒê√£ ch√®n c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh cho user demo';

-- T·∫°o m·ªôt s·ªë th√¥ng b√°o demo
INSERT INTO Notifications (UserID, Title, Message, Type, Priority) VALUES
(@demoUserId, N'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng!', N'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng qu·∫£n l√Ω t√†i ch√≠nh. H√£y b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác th√™m giao d·ªãch ƒë·∫ßu ti√™n.', 'system', 'medium'),
(@demoUserId, N'Thi·∫øt l·∫≠p ng√¢n s√°ch', N'B·∫°n ch∆∞a c√≥ ng√¢n s√°ch n√†o. H√£y t·∫°o ng√¢n s√°ch ƒë·ªÉ theo d√µi chi ti√™u hi·ªáu qu·∫£ h∆°n.', 'reminder', 'high');

PRINT '‚úÖ ƒê√£ t·∫°o th√¥ng b√°o demo';

-- T·∫°o m·ªôt s·ªë giao d·ªãch m·∫´u
DECLARE @foodCategoryId INT, @salaryCategoryId INT;

SELECT @foodCategoryId = CategoryID FROM Categories WHERE UserID = @demoUserId AND CategoryName = N'ƒÇn u·ªëng';
SELECT @salaryCategoryId = CategoryID FROM Categories WHERE UserID = @demoUserId AND CategoryName = N'L∆∞∆°ng';

INSERT INTO Transactions (UserID, CategoryID, Amount, TransactionType, TransactionDate, Description) VALUES
(@demoUserId, @salaryCategoryId, 15000000, 'Income', DATEADD(DAY, -5, GETDATE()), N'L∆∞∆°ng th√°ng 12'),
(@demoUserId, @foodCategoryId, 150000, 'Expense', DATEADD(DAY, -3, GETDATE()), N'ƒÇn tr∆∞a'),
(@demoUserId, @foodCategoryId, 80000, 'Expense', DATEADD(DAY, -2, GETDATE()), N'C√† ph√™ s√°ng'),
(@demoUserId, @foodCategoryId, 200000, 'Expense', DATEADD(DAY, -1, GETDATE()), N'ƒÇn t·ªëi v·ªõi gia ƒë√¨nh');

PRINT '‚úÖ ƒê√£ t·∫°o ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' giao d·ªãch m·∫´u';

-- T·∫°o ng√¢n s√°ch m·∫´u
INSERT INTO Budgets (UserID, CategoryID, BudgetAmount, BudgetMonth, BudgetYear, WarningThreshold) VALUES
(@demoUserId, @foodCategoryId, 2000000, MONTH(GETDATE()), YEAR(GETDATE()), 80.00);

PRINT '‚úÖ ƒê√£ t·∫°o ng√¢n s√°ch m·∫´u';

-- =============================================
-- B∆Ø·ªöC 9: KI·ªÇM TRA V√Ä X√ÅC NH·∫¨N
-- =============================================

PRINT 'üîç B∆Ø·ªöC 9: Ki·ªÉm tra v√† x√°c nh·∫≠n...';

-- Ki·ªÉm tra s·ªë l∆∞·ª£ng b·∫£ng ƒë√£ t·∫°o
SELECT
    TABLE_NAME as 'T√™n B·∫£ng',
    (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = t.TABLE_NAME) as 'S·ªë C·ªôt'
FROM INFORMATION_SCHEMA.TABLES t
WHERE TABLE_TYPE = 'BASE TABLE'
    AND TABLE_NAME IN ('Users', 'Categories', 'Transactions', 'Budgets', 'UserSettings', 'Notifications', 'BackupHistory')
ORDER BY TABLE_NAME;

-- Ki·ªÉm tra s·ªë l∆∞·ª£ng d·ªØ li·ªáu
PRINT '';
PRINT 'üìä Th·ªëng k√™ d·ªØ li·ªáu:';
PRINT '   - Users: ' + CAST((SELECT COUNT(*) FROM Users) AS NVARCHAR);
PRINT '   - Categories: ' + CAST((SELECT COUNT(*) FROM Categories) AS NVARCHAR);
PRINT '   - Transactions: ' + CAST((SELECT COUNT(*) FROM Transactions) AS NVARCHAR);
PRINT '   - Budgets: ' + CAST((SELECT COUNT(*) FROM Budgets) AS NVARCHAR);
PRINT '   - UserSettings: ' + CAST((SELECT COUNT(*) FROM UserSettings) AS NVARCHAR);
PRINT '   - Notifications: ' + CAST((SELECT COUNT(*) FROM Notifications) AS NVARCHAR);

-- =============================================
-- HO√ÄN TH√ÄNH
-- =============================================

PRINT '';
PRINT 'üéâ THI·∫æT L·∫¨P DATABASE HO√ÄN T·∫§T!';
PRINT '';
PRINT 'üìã T√≥m t·∫Øt:';
PRINT '   ‚úÖ Database: PersonalFinanceDB';
PRINT '   ‚úÖ B·∫£ng ch√≠nh: 7 b·∫£ng';
PRINT '   ‚úÖ Indexes: ƒê√£ t·ªëi ∆∞u hi·ªáu su·∫•t';
PRINT '   ‚úÖ Stored Procedures: 4 procedures';
PRINT '   ‚úÖ Views & Functions: 2 objects';
PRINT '   ‚úÖ D·ªØ li·ªáu m·∫´u: User demo + categories + transactions';
PRINT '';
PRINT 'üöÄ S·∫µn s√†ng s·ª≠ d·ª•ng Personal Finance Manager!';
PRINT 'üë§ T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch';
PRINT 'üìÖ Ho√†n th√†nh: ' + CONVERT(NVARCHAR, GETDATE(), 120);

-- Th√¥ng tin k·∫øt n·ªëi cho developers
PRINT '';
PRINT 'üîó Th√¥ng tin k·∫øt n·ªëi:';
PRINT '   Server: TIEUNHATBACH\TIEUNHATBACH';
PRINT '   Database: PersonalFinanceDB';
PRINT '   Demo User: demo@example.com';
PRINT '';
PRINT 'üìñ ƒê·ªÉ s·ª≠ d·ª•ng: Ch·∫°y backend server v√† frontend app';
PRINT '   Backend: cd backend && npm run dev';
PRINT '   Frontend: cd frontend && npm run dev';
PRINT '';
PRINT 'üéØ Happy Coding! - Ti·ªÉu Nh·∫•t B·∫°ch';

-- End of script
