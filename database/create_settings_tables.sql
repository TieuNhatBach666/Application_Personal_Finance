-- =============================================
-- T·∫†O B·∫¢NG CHO H·ªÜ TH·ªêNG C√ÄI ƒê·∫∂T V√Ä SAO L∆ØU
-- =============================================

USE PersonalFinanceDB;
GO

PRINT 'üîß Creating Settings and Backup tables...';

-- B·∫£ng UserSettings - L∆∞u c√†i ƒë·∫∑t ng∆∞·ªùi d√πng
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'UserSettings')
BEGIN
    CREATE TABLE UserSettings (
        SettingID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
        UserID UNIQUEIDENTIFIER NOT NULL,
        SettingKey NVARCHAR(100) NOT NULL,
        SettingValue NVARCHAR(MAX) NOT NULL,
        SettingType NVARCHAR(20) NOT NULL DEFAULT 'string', -- string, boolean, number, json
        Category NVARCHAR(50) NOT NULL, -- general, notifications, privacy, backup, appearance
        CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
        UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
        
        FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
        UNIQUE (UserID, SettingKey)
    );
    
    PRINT '‚úÖ UserSettings table created';
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è UserSettings table already exists';
END

-- B·∫£ng BackupHistory - L·ªãch s·ª≠ sao l∆∞u
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'BackupHistory')
BEGIN
    CREATE TABLE BackupHistory (
        BackupID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
        UserID UNIQUEIDENTIFIER NOT NULL,
        BackupType NVARCHAR(20) NOT NULL, -- manual, automatic
        BackupSize BIGINT NULL, -- Size in bytes
        Status NVARCHAR(20) NOT NULL DEFAULT 'pending', -- pending, completed, failed
        ErrorMessage NVARCHAR(MAX) NULL,
        CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
        CompletedAt DATETIME2 NULL,
        
        FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
    );
    
    PRINT '‚úÖ BackupHistory table created';
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è BackupHistory table already exists';
END

-- B·∫£ng Notifications - Th√¥ng b√°o h·ªá th·ªëng
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Notifications')
BEGIN
    CREATE TABLE Notifications (
        NotificationID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
        UserID UNIQUEIDENTIFIER NOT NULL,
        Title NVARCHAR(200) NOT NULL,
        Message NVARCHAR(MAX) NOT NULL,
        Type NVARCHAR(50) NOT NULL, -- budget_warning, achievement, report, system, reminder
        Priority NVARCHAR(20) NOT NULL DEFAULT 'medium', -- low, medium, high, urgent
        IsRead BIT DEFAULT 0,
        IsArchived BIT DEFAULT 0,
        ActionUrl NVARCHAR(500) NULL, -- URL ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng khi click
        ExpiresAt DATETIME2 NULL, -- Th·ªùi gian h·∫øt h·∫°n
        CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
        ReadAt DATETIME2 NULL,
        
        FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
    );
    
    PRINT '‚úÖ Notifications table created';
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è Notifications table already exists';
END

-- T·∫°o indexes cho hi·ªáu su·∫•t
PRINT 'üìä Creating indexes...';

-- Index cho UserSettings
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_UserSettings_UserID_Category')
BEGIN
    CREATE INDEX IX_UserSettings_UserID_Category ON UserSettings(UserID, Category);
    PRINT '‚úÖ Index IX_UserSettings_UserID_Category created';
END

-- Index cho BackupHistory
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_BackupHistory_UserID_CreatedAt')
BEGIN
    CREATE INDEX IX_BackupHistory_UserID_CreatedAt ON BackupHistory(UserID, CreatedAt DESC);
    PRINT '‚úÖ Index IX_BackupHistory_UserID_CreatedAt created';
END

-- Index cho Notifications
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_Notifications_UserID_IsRead_CreatedAt')
BEGIN
    CREATE INDEX IX_Notifications_UserID_IsRead_CreatedAt ON Notifications(UserID, IsRead, CreatedAt DESC);
    PRINT '‚úÖ Index IX_Notifications_UserID_IsRead_CreatedAt created';
END

-- =============================================
-- T·∫†O STORED PROCEDURES
-- =============================================

PRINT 'üîß Creating stored procedures...';

-- Stored Procedure: L·∫•y c√†i ƒë·∫∑t ng∆∞·ªùi d√πng
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_GetUserSettings')
    DROP PROCEDURE sp_GetUserSettings;
GO

CREATE PROCEDURE sp_GetUserSettings
    @userId UNIQUEIDENTIFIER,
    @category NVARCHAR(50) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        SettingID,
        SettingKey,
        SettingValue,
        SettingType,
        Category,
        CreatedAt,
        UpdatedAt
    FROM UserSettings
    WHERE UserID = @userId
        AND (@category IS NULL OR Category = @category)
    ORDER BY Category, SettingKey;
END
GO

PRINT '‚úÖ sp_GetUserSettings created';

-- Stored Procedure: L·∫•y th√¥ng b√°o ng∆∞·ªùi d√πng
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_GetUserNotifications')
    DROP PROCEDURE sp_GetUserNotifications;
GO

CREATE PROCEDURE sp_GetUserNotifications
    @userId UNIQUEIDENTIFIER,
    @isRead BIT = NULL,
    @type NVARCHAR(50) = NULL,
    @limit INT = 50,
    @offset INT = 0
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        NotificationID,
        Title,
        Message,
        Type,
        Priority,
        IsRead,
        IsArchived,
        ActionUrl,
        ExpiresAt,
        CreatedAt,
        ReadAt,
        -- T√≠nh to√°n th·ªùi gian t∆∞∆°ng ƒë·ªëi
        CASE 
            WHEN DATEDIFF(MINUTE, CreatedAt, GETUTCDATE()) < 60 
                THEN CAST(DATEDIFF(MINUTE, CreatedAt, GETUTCDATE()) AS NVARCHAR) + N' ph√∫t tr∆∞·ªõc'
            WHEN DATEDIFF(HOUR, CreatedAt, GETUTCDATE()) < 24 
                THEN CAST(DATEDIFF(HOUR, CreatedAt, GETUTCDATE()) AS NVARCHAR) + N' gi·ªù tr∆∞·ªõc'
            WHEN DATEDIFF(DAY, CreatedAt, GETUTCDATE()) < 7 
                THEN CAST(DATEDIFF(DAY, CreatedAt, GETUTCDATE()) AS NVARCHAR) + N' ng√†y tr∆∞·ªõc'
            ELSE FORMAT(CreatedAt, 'dd/MM/yyyy HH:mm')
        END as TimeAgo
    FROM Notifications
    WHERE UserID = @userId
        AND (@isRead IS NULL OR IsRead = @isRead)
        AND (@type IS NULL OR Type = @type)
        AND IsArchived = 0
        AND (ExpiresAt IS NULL OR ExpiresAt > GETUTCDATE())
    ORDER BY 
        CASE Priority 
            WHEN 'urgent' THEN 1
            WHEN 'high' THEN 2
            WHEN 'medium' THEN 3
            WHEN 'low' THEN 4
        END,
        CreatedAt DESC
    OFFSET @offset ROWS
    FETCH NEXT @limit ROWS ONLY;
END
GO

PRINT '‚úÖ sp_GetUserNotifications created';

-- Stored Procedure: T·∫°o th√¥ng b√°o m·ªõi
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_CreateNotification')
    DROP PROCEDURE sp_CreateNotification;
GO

CREATE PROCEDURE sp_CreateNotification
    @userId UNIQUEIDENTIFIER,
    @title NVARCHAR(200),
    @message NVARCHAR(MAX),
    @type NVARCHAR(50),
    @priority NVARCHAR(20) = 'medium',
    @actionUrl NVARCHAR(500) = NULL,
    @expiresAt DATETIME2 = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @notificationId UNIQUEIDENTIFIER = NEWID();
    
    INSERT INTO Notifications (
        NotificationID, UserID, Title, Message, Type, Priority, ActionUrl, ExpiresAt
    ) VALUES (
        @notificationId, @userId, @title, @message, @type, @priority, @actionUrl, @expiresAt
    );
    
    SELECT @notificationId as NotificationID;
END
GO

PRINT '‚úÖ sp_CreateNotification created';

-- =============================================
-- CH√àN D·ªÆ LI·ªÜU M·∫∂C ƒê·ªäNH
-- =============================================

PRINT 'üìù Inserting default settings...';

-- L·∫•y user ƒë·∫ßu ti√™n ƒë·ªÉ test (n·∫øu c√≥)
DECLARE @testUserId UNIQUEIDENTIFIER;
SELECT TOP 1 @testUserId = UserID FROM Users;

IF @testUserId IS NOT NULL
BEGIN
    -- C√†i ƒë·∫∑t giao di·ªán m·∫∑c ƒë·ªãnh
    INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category)
    SELECT @testUserId, 'theme', 'light', 'string', 'appearance'
    WHERE NOT EXISTS (SELECT 1 FROM UserSettings WHERE UserID = @testUserId AND SettingKey = 'theme');
    
    INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category)
    SELECT @testUserId, 'language', 'vi', 'string', 'appearance'
    WHERE NOT EXISTS (SELECT 1 FROM UserSettings WHERE UserID = @testUserId AND SettingKey = 'language');
    
    INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category)
    SELECT @testUserId, 'currency', 'VND', 'string', 'appearance'
    WHERE NOT EXISTS (SELECT 1 FROM UserSettings WHERE UserID = @testUserId AND SettingKey = 'currency');
    
    -- C√†i ƒë·∫∑t th√¥ng b√°o m·∫∑c ƒë·ªãnh
    INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category)
    SELECT @testUserId, 'push', 'true', 'boolean', 'notifications'
    WHERE NOT EXISTS (SELECT 1 FROM UserSettings WHERE UserID = @testUserId AND SettingKey = 'push');
    
    INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category)
    SELECT @testUserId, 'email', 'true', 'boolean', 'notifications'
    WHERE NOT EXISTS (SELECT 1 FROM UserSettings WHERE UserID = @testUserId AND SettingKey = 'email');
    
    INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category)
    SELECT @testUserId, 'budget', 'true', 'boolean', 'notifications'
    WHERE NOT EXISTS (SELECT 1 FROM UserSettings WHERE UserID = @testUserId AND SettingKey = 'budget');
    
    -- T·∫°o m·ªôt s·ªë th√¥ng b√°o demo
    INSERT INTO Notifications (UserID, Title, Message, Type, Priority)
    SELECT @testUserId, N'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng!', N'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng qu·∫£n l√Ω t√†i ch√≠nh. H√£y b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác th√™m giao d·ªãch ƒë·∫ßu ti√™n.', 'system', 'medium'
    WHERE NOT EXISTS (SELECT 1 FROM Notifications WHERE UserID = @testUserId AND Type = 'system');
    
    INSERT INTO Notifications (UserID, Title, Message, Type, Priority, ActionUrl)
    SELECT @testUserId, N'Thi·∫øt l·∫≠p ng√¢n s√°ch', N'B·∫°n ch∆∞a c√≥ ng√¢n s√°ch n√†o. H√£y t·∫°o ng√¢n s√°ch ƒë·ªÉ theo d√µi chi ti√™u hi·ªáu qu·∫£ h∆°n.', 'reminder', 'high', '/budget'
    WHERE NOT EXISTS (SELECT 1 FROM Notifications WHERE UserID = @testUserId AND Type = 'reminder');
    
    PRINT '‚úÖ Default settings and notifications inserted for test user';
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è No users found, skipping default data insertion';
END

PRINT 'üéâ Settings and Backup system setup completed!';
PRINT '';
PRINT 'üìã Summary:';
PRINT '   - UserSettings table: ‚úÖ';
PRINT '   - BackupHistory table: ‚úÖ';
PRINT '   - Notifications table: ‚úÖ';
PRINT '   - Stored procedures: ‚úÖ';
PRINT '   - Default data: ‚úÖ';
PRINT '';
PRINT 'üöÄ Ready to use Settings and Notifications features!';
