-- =============================================
-- PERSONAL FINANCE MANAGER - DATABASE HO√ÄN CH·ªàNH T·ªîNG H·ª¢P
-- ¬© Ti·ªÉu Nh·∫•t B·∫°ch 2025
-- M√¥ t·∫£: File SQL duy nh·∫•t ch·ª©a ƒë·∫ßy ƒë·ªß m·ªçi th·ª© c·∫ßn thi·∫øt cho d·ª± √°n
-- Phi√™n b·∫£n: 2.1 - ƒê√£ s·ª≠a l·ªói batch
-- =============================================

-- üéØ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:
-- 1. M·ªü SQL Server Management Studio (SSMS)
-- 2. K·∫øt n·ªëi v·ªõi server: TIEUNHATBACH666\TIEUNHATBACH (sa/123456)
-- 3. Ch·∫°y to√†n b·ªô file n√†y (F5)
-- 4. Database s·∫Ω ƒë∆∞·ª£c t·∫°o ho√†n ch·ªânh v·ªõi d·ªØ li·ªáu m·∫´u
-- 5. S·ª≠ d·ª•ng t√†i kho·∫£n: nguoidung@vidu.com / 123456

USE master;
GO

PRINT 'üöÄ B·∫ÆT ƒê·∫¶U THI·∫æT L·∫¨P PERSONAL FINANCE MANAGER DATABASE';
PRINT 'üìÖ Th·ªùi gian: ' + CONVERT(NVARCHAR, GETDATE(), 120);
PRINT 'üë§ T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch';
PRINT 'üéØ M·ª•c ti√™u: T·∫°o database ho√†n ch·ªânh v·ªõi t·∫•t c·∫£ ch·ª©c nƒÉng';
PRINT 'üíé B·∫£n quy·ªÅn: ¬© Ti·ªÉu Nh·∫•t B·∫°ch 2025';
PRINT '';

-- =============================================
-- B∆Ø·ªöC 1: T·∫†O DATABASE
-- =============================================

PRINT 'üìä B∆Ø·ªöC 1: T·∫°o Database PersonalFinanceDB...';

-- X√≥a database c≈© n·∫øu t·ªìn t·∫°i
IF EXISTS (SELECT name FROM sys.databases WHERE name = 'PersonalFinanceDB')
BEGIN
    ALTER DATABASE PersonalFinanceDB SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE PersonalFinanceDB;
    PRINT 'üóëÔ∏è ƒê√£ x√≥a database c≈©';
END

-- T·∫°o database m·ªõi v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
CREATE DATABASE PersonalFinanceDB
ON (
    NAME = 'PersonalFinanceDB',
    FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.TIEUNHATBACH\MSSQL\DATA\PersonalFinanceDB.mdf',
    SIZE = 100MB,
    MAXSIZE = 1GB,
    FILEGROWTH = 10MB
)
LOG ON (
    NAME = 'PersonalFinanceDB_Log',
    FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.TIEUNHATBACH\MSSQL\DATA\PersonalFinanceDB_Log.ldf',
    SIZE = 10MB,
    MAXSIZE = 100MB,
    FILEGROWTH = 5MB
);

PRINT '‚úÖ Database PersonalFinanceDB ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng';
GO

USE PersonalFinanceDB;
GO

-- =============================================
-- B∆Ø·ªöC 2: T·∫†O C√ÅC B·∫¢NG CH√çNH
-- =============================================

PRINT 'üèóÔ∏è B∆Ø·ªöC 2: T·∫°o c√°c b·∫£ng ch√≠nh...';

-- B·∫£ng Users - Ng∆∞·ªùi d√πng
CREATE TABLE Users (
    UserID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    Email NVARCHAR(255) UNIQUE NOT NULL,
    PasswordHash NVARCHAR(255) NOT NULL,
    FirstName NVARCHAR(100) NOT NULL,
    LastName NVARCHAR(100) NOT NULL,
    PhoneNumber NVARCHAR(20),
    AvatarURL NVARCHAR(500) NULL,
    Currency NVARCHAR(10) DEFAULT 'VND',
    Language NVARCHAR(10) DEFAULT 'vi-VN',
    TimeZone NVARCHAR(50) DEFAULT 'Asia/Ho_Chi_Minh',
    IsEmailVerified BIT DEFAULT 0,
    IsActive BIT DEFAULT 1,
    LastLoginAt DATETIME2 NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE()
);
PRINT '‚úÖ B·∫£ng Users ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Categories - Danh m·ª•c thu chi
CREATE TABLE Categories (
    CategoryID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NULL, -- NULL cho default categories
    CategoryName NVARCHAR(100) NOT NULL,
    Type NVARCHAR(20) CHECK (Type IN ('Income', 'Expense')) NOT NULL,
    Icon NVARCHAR(50) DEFAULT 'default',
    Color NVARCHAR(7) DEFAULT '#3498db',
    ParentCategoryID UNIQUEIDENTIFIER NULL,
    Description NVARCHAR(500) NULL,
    IsActive BIT DEFAULT 1,
    SortOrder INT DEFAULT 0,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (ParentCategoryID) REFERENCES Categories(CategoryID)
);
PRINT '‚úÖ B·∫£ng Categories ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Transactions - Giao d·ªãch
CREATE TABLE Transactions (
    TransactionID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    Amount DECIMAL(15,2) NOT NULL,
    Type NVARCHAR(20) CHECK (Type IN ('Income', 'Expense')) NOT NULL,
    Description NVARCHAR(500),
    TransactionDate DATE NOT NULL,
    ReceiptURL NVARCHAR(500) NULL,
    Tags NVARCHAR(500) NULL,
    Location NVARCHAR(200) NULL,
    PaymentMethod NVARCHAR(50) DEFAULT 'Cash',
    IsRecurring BIT DEFAULT 0,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);
PRINT '‚úÖ B·∫£ng Transactions ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Budgets - Ng√¢n s√°ch
CREATE TABLE Budgets (
    BudgetID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    BudgetName NVARCHAR(100) NOT NULL,
    BudgetAmount DECIMAL(15,2) NOT NULL,
    SpentAmount DECIMAL(15,2) DEFAULT 0,
    Period NVARCHAR(20) CHECK (Period IN ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')) NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NOT NULL,
    AlertThreshold DECIMAL(5,2) DEFAULT 80.00 CHECK (AlertThreshold BETWEEN 0 AND 100),
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);
PRINT '‚úÖ B·∫£ng Budgets ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng UserSettings - C√†i ƒë·∫∑t ng∆∞·ªùi d√πng
CREATE TABLE UserSettings (
    SettingID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    SettingKey NVARCHAR(100) NOT NULL,
    SettingValue NVARCHAR(MAX) NOT NULL,
    SettingType NVARCHAR(20) NOT NULL DEFAULT 'string',
    Category NVARCHAR(50) NOT NULL,
    Description NVARCHAR(200) NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    UNIQUE (UserID, SettingKey)
);
PRINT '‚úÖ B·∫£ng UserSettings ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Notifications - Th√¥ng b√°o
CREATE TABLE Notifications (
    NotificationID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    Title NVARCHAR(200) NOT NULL,
    Message NVARCHAR(MAX) NOT NULL,
    Type NVARCHAR(50) NOT NULL,
    Priority NVARCHAR(20) NOT NULL DEFAULT 'medium',
    IsRead BIT DEFAULT 0,
    IsArchived BIT DEFAULT 0,
    ActionUrl NVARCHAR(500) NULL,
    ExpiresAt DATETIME2 NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    ReadAt DATETIME2 NULL,
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
PRINT '‚úÖ B·∫£ng Notifications ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng RecurringTransactions - Giao d·ªãch ƒë·ªãnh k·ª≥
CREATE TABLE RecurringTransactions (
    RecurringID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    Description NVARCHAR(255) NOT NULL,
    Amount DECIMAL(15,2) NOT NULL,
    Type NVARCHAR(10) CHECK (Type IN ('Income', 'Expense')) NOT NULL,
    Frequency NVARCHAR(20) CHECK (Frequency IN ('Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly')) NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NULL,
    NextDueDate DATE NOT NULL,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID) ON DELETE CASCADE
);
PRINT '‚úÖ B·∫£ng RecurringTransactions ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng RecurringTransactionHistory - L·ªãch s·ª≠ giao d·ªãch ƒë·ªãnh k·ª≥
CREATE TABLE RecurringTransactionHistory (
    HistoryID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    RecurringID UNIQUEIDENTIFIER NOT NULL,
    TransactionID UNIQUEIDENTIFIER NOT NULL,
    GeneratedDate DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (RecurringID) REFERENCES RecurringTransactions(RecurringID) ON DELETE CASCADE,
    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID) ON DELETE CASCADE
);
PRINT '‚úÖ B·∫£ng RecurringTransactionHistory ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng BackupHistory - L·ªãch s·ª≠ sao l∆∞u
CREATE TABLE BackupHistory (
    BackupID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    BackupType NVARCHAR(20) NOT NULL,
    BackupSize BIGINT NULL,
    BackupPath NVARCHAR(500) NULL,
    Status NVARCHAR(20) NOT NULL DEFAULT 'pending',
    ErrorMessage NVARCHAR(MAX) NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    CompletedAt DATETIME2 NULL,
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
PRINT '‚úÖ B·∫£ng BackupHistory ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng AuditLog - Nh·∫≠t k√Ω ki·ªÉm to√°n
CREATE TABLE AuditLog (
    AuditID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NULL,
    TableName NVARCHAR(100) NOT NULL,
    Operation NVARCHAR(20) NOT NULL, -- INSERT, UPDATE, DELETE
    RecordID NVARCHAR(100) NOT NULL,
    OldValues NVARCHAR(MAX) NULL,
    NewValues NVARCHAR(MAX) NULL,
    IPAddress NVARCHAR(45) NULL,
    UserAgent NVARCHAR(500) NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE SET NULL
);
PRINT '‚úÖ B·∫£ng AuditLog ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- =============================================
-- B∆Ø·ªöC 3: T·∫†O INDEXES CHO HI·ªÜU SU·∫§T
-- =============================================

PRINT 'üìä B∆Ø·ªöC 3: T·∫°o indexes cho hi·ªáu su·∫•t...';

-- Indexes cho b·∫£ng Users
CREATE INDEX IX_Users_Email ON Users(Email);
CREATE INDEX IX_Users_IsActive ON Users(IsActive);
CREATE INDEX IX_Users_CreatedAt ON Users(CreatedAt DESC);

-- Indexes cho b·∫£ng Transactions
CREATE INDEX IX_Transactions_UserID_Date ON Transactions(UserID, TransactionDate DESC);
CREATE INDEX IX_Transactions_CategoryID ON Transactions(CategoryID);
CREATE INDEX IX_Transactions_Type_Date ON Transactions(Type, TransactionDate DESC);
CREATE INDEX IX_Transactions_Amount ON Transactions(Amount DESC);
CREATE INDEX IX_Transactions_PaymentMethod ON Transactions(PaymentMethod);

-- Indexes cho b·∫£ng Categories
CREATE INDEX IX_Categories_UserID_Type ON Categories(UserID, Type);
CREATE INDEX IX_Categories_Type_Active ON Categories(Type, IsActive);
CREATE INDEX IX_Categories_ParentCategoryID ON Categories(ParentCategoryID);

-- Indexes cho b·∫£ng Budgets
CREATE INDEX IX_Budgets_UserID_Period ON Budgets(UserID, Period);
CREATE INDEX IX_Budgets_CategoryID ON Budgets(CategoryID);
CREATE INDEX IX_Budgets_StartDate_EndDate ON Budgets(StartDate, EndDate);
CREATE INDEX IX_Budgets_IsActive ON Budgets(IsActive);

-- Indexes cho b·∫£ng UserSettings
CREATE INDEX IX_UserSettings_UserID_Category ON UserSettings(UserID, Category);
CREATE INDEX IX_UserSettings_SettingKey ON UserSettings(SettingKey);

-- Indexes cho b·∫£ng Notifications
CREATE INDEX IX_Notifications_UserID_IsRead_CreatedAt ON Notifications(UserID, IsRead, CreatedAt DESC);
CREATE INDEX IX_Notifications_Type_Priority ON Notifications(Type, Priority);
CREATE INDEX IX_Notifications_ExpiresAt ON Notifications(ExpiresAt);

-- Indexes cho b·∫£ng RecurringTransactions
CREATE INDEX IX_RecurringTransactions_UserID ON RecurringTransactions(UserID);
CREATE INDEX IX_RecurringTransactions_NextDueDate ON RecurringTransactions(NextDueDate);
CREATE INDEX IX_RecurringTransactions_IsActive ON RecurringTransactions(IsActive);

-- Indexes cho b·∫£ng BackupHistory
CREATE INDEX IX_BackupHistory_UserID_CreatedAt ON BackupHistory(UserID, CreatedAt DESC);
CREATE INDEX IX_BackupHistory_Status ON BackupHistory(Status);

-- Indexes cho b·∫£ng AuditLog
CREATE INDEX IX_AuditLog_UserID_CreatedAt ON AuditLog(UserID, CreatedAt DESC);
CREATE INDEX IX_AuditLog_TableName_Operation ON AuditLog(TableName, Operation);

PRINT '‚úÖ T·∫•t c·∫£ indexes ƒë√£ ƒë∆∞·ª£c t·∫°o ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t';
GO

-- =============================================
-- B∆Ø·ªöC 4: T·∫†O VIEWS
-- =============================================

PRINT 'üëÅÔ∏è B∆Ø·ªöC 4: T·∫°o c√°c Views...';
GO

-- View t·ªïng quan giao d·ªãch
CREATE VIEW vw_TransactionSummary AS
SELECT 
    t.UserID,
    t.TransactionDate,
    c.CategoryName,
    c.Type as CategoryType,
    t.Amount,
    t.Description,
    t.PaymentMethod,
    YEAR(t.TransactionDate) as Year,
    MONTH(t.TransactionDate) as Month,
    DAY(t.TransactionDate) as Day
FROM Transactions t
INNER JOIN Categories c ON t.CategoryID = c.CategoryID
WHERE t.UserID IS NOT NULL;
GO

PRINT '‚úÖ View vw_TransactionSummary ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- View th·ªëng k√™ ng√¢n s√°ch
CREATE VIEW vw_BudgetProgress AS
SELECT 
    b.BudgetID,
    b.UserID,
    b.BudgetName,
    c.CategoryName,
    b.BudgetAmount,
    b.SpentAmount,
    CASE 
        WHEN b.BudgetAmount > 0 THEN (b.SpentAmount / b.BudgetAmount) * 100
        ELSE 0
    END as ProgressPercentage,
    b.AlertThreshold,
    CASE 
        WHEN b.BudgetAmount > 0 AND (b.SpentAmount / b.BudgetAmount) * 100 >= b.AlertThreshold THEN 1
        ELSE 0
    END as IsOverThreshold,
    b.Period,
    b.StartDate,
    b.EndDate,
    b.IsActive
FROM Budgets b
INNER JOIN Categories c ON b.CategoryID = c.CategoryID;
GO

PRINT '‚úÖ View vw_BudgetProgress ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- View th·ªëng k√™ thu chi theo th√°ng
CREATE VIEW vw_MonthlyIncomeExpense AS
SELECT 
    UserID,
    YEAR(TransactionDate) as Year,
    MONTH(TransactionDate) as Month,
    SUM(CASE WHEN Type = 'Income' THEN Amount ELSE 0 END) as TotalIncome,
    SUM(CASE WHEN Type = 'Expense' THEN Amount ELSE 0 END) as TotalExpense,
    SUM(CASE WHEN Type = 'Income' THEN Amount ELSE -Amount END) as NetAmount,
    COUNT(*) as TransactionCount
FROM Transactions
GROUP BY UserID, YEAR(TransactionDate), MONTH(TransactionDate);
GO

PRINT '‚úÖ View vw_MonthlyIncomeExpense ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- =============================================
-- B∆Ø·ªöC 5: T·∫†O FUNCTIONS
-- =============================================

PRINT '‚öôÔ∏è B∆Ø·ªöC 5: T·∫°o c√°c Functions...';
GO

-- Function t√≠nh ti·∫øn ƒë·ªô ng√¢n s√°ch
CREATE FUNCTION fn_GetBudgetProgress(@BudgetID UNIQUEIDENTIFIER)
RETURNS TABLE
AS
RETURN
(
    SELECT 
        b.BudgetID,
        b.BudgetName,
        b.BudgetAmount,
        ISNULL(SUM(t.Amount), 0) as SpentAmount,
        CASE 
            WHEN b.BudgetAmount > 0 THEN (ISNULL(SUM(t.Amount), 0) / b.BudgetAmount) * 100
            ELSE 0
        END as ProgressPercentage
    FROM Budgets b
    LEFT JOIN Transactions t ON b.CategoryID = t.CategoryID 
        AND b.UserID = t.UserID
        AND t.TransactionDate BETWEEN b.StartDate AND b.EndDate
        AND t.Type = 'Expense'
    WHERE b.BudgetID = @BudgetID
    GROUP BY b.BudgetID, b.BudgetName, b.BudgetAmount
);
GO

PRINT '‚úÖ Function fn_GetBudgetProgress ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- Function t√≠nh t·ªïng thu chi theo kho·∫£ng th·ªùi gian
CREATE FUNCTION fn_GetIncomeExpenseSummary(
    @UserID UNIQUEIDENTIFIER,
    @StartDate DATE,
    @EndDate DATE
)
RETURNS TABLE
AS
RETURN
(
    SELECT 
        SUM(CASE WHEN Type = 'Income' THEN Amount ELSE 0 END) as TotalIncome,
        SUM(CASE WHEN Type = 'Expense' THEN Amount ELSE 0 END) as TotalExpense,
        SUM(CASE WHEN Type = 'Income' THEN Amount ELSE -Amount END) as NetAmount,
        COUNT(*) as TransactionCount
    FROM Transactions
    WHERE UserID = @UserID 
        AND TransactionDate BETWEEN @StartDate AND @EndDate
);
GO

PRINT '‚úÖ Function fn_GetIncomeExpenseSummary ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- =============================================
-- B∆Ø·ªöC 6: T·∫†O STORED PROCEDURES
-- =============================================

PRINT 'üîß B∆Ø·ªöC 6: T·∫°o c√°c Stored Procedures...';
GO

-- Procedure t·∫°o categories m·∫∑c ƒë·ªãnh cho user m·ªõi
CREATE PROCEDURE sp_CreateDefaultCategoriesForUser
    @UserID UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Sao ch√©p categories m·∫∑c ƒë·ªãnh cho user m·ªõi
    INSERT INTO Categories (UserID, CategoryName, Type, Icon, Color, Description)
    SELECT 
        @UserID,
        CategoryName,
        Type,
        Icon,
        Color,
        Description
    FROM Categories 
    WHERE UserID = '00000000-0000-0000-0000-000000000000';
    
    SELECT @@ROWCOUNT as CategoriesCreated;
END;
GO

PRINT '‚úÖ Procedure sp_CreateDefaultCategoriesForUser ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- Procedure x·ª≠ l√Ω giao d·ªãch ƒë·ªãnh k·ª≥
CREATE PROCEDURE sp_ProcessRecurringTransactions
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @ProcessedCount INT = 0;
    
    -- Cursor ƒë·ªÉ x·ª≠ l√Ω t·ª´ng giao d·ªãch ƒë·ªãnh k·ª≥
    DECLARE recurring_cursor CURSOR FOR
    SELECT RecurringID, UserID, CategoryID, Description, Amount, Type, Frequency, NextDueDate
    FROM RecurringTransactions
    WHERE IsActive = 1 AND NextDueDate <= GETDATE();
    
    DECLARE @RecurringID UNIQUEIDENTIFIER, @UserID UNIQUEIDENTIFIER, @CategoryID UNIQUEIDENTIFIER;
    DECLARE @Description NVARCHAR(255), @Amount DECIMAL(15,2), @Type NVARCHAR(10);
    DECLARE @Frequency NVARCHAR(20), @NextDueDate DATE, @NewTransactionID UNIQUEIDENTIFIER;
    
    OPEN recurring_cursor;
    FETCH NEXT FROM recurring_cursor INTO @RecurringID, @UserID, @CategoryID, @Description, @Amount, @Type, @Frequency, @NextDueDate;
    
    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- T·∫°o giao d·ªãch m·ªõi
        SET @NewTransactionID = NEWID();
        INSERT INTO Transactions (TransactionID, UserID, CategoryID, Amount, Type, Description, TransactionDate, IsRecurring)
        VALUES (@NewTransactionID, @UserID, @CategoryID, @Amount, @Type, @Description, @NextDueDate, 1);
        
        -- L∆∞u l·ªãch s·ª≠
        INSERT INTO RecurringTransactionHistory (RecurringID, TransactionID)
        VALUES (@RecurringID, @NewTransactionID);
        
        -- C·∫≠p nh·∫≠t NextDueDate
        DECLARE @NewNextDueDate DATE;
        SET @NewNextDueDate = CASE 
            WHEN @Frequency = 'Daily' THEN DATEADD(DAY, 1, @NextDueDate)
            WHEN @Frequency = 'Weekly' THEN DATEADD(WEEK, 1, @NextDueDate)
            WHEN @Frequency = 'Monthly' THEN DATEADD(MONTH, 1, @NextDueDate)
            WHEN @Frequency = 'Quarterly' THEN DATEADD(QUARTER, 1, @NextDueDate)
            WHEN @Frequency = 'Yearly' THEN DATEADD(YEAR, 1, @NextDueDate)
            ELSE @NextDueDate
        END;
        
        UPDATE RecurringTransactions 
        SET NextDueDate = @NewNextDueDate, UpdatedAt = GETUTCDATE()
        WHERE RecurringID = @RecurringID;
        
        SET @ProcessedCount = @ProcessedCount + 1;
        
        FETCH NEXT FROM recurring_cursor INTO @RecurringID, @UserID, @CategoryID, @Description, @Amount, @Type, @Frequency, @NextDueDate;
    END;
    
    CLOSE recurring_cursor;
    DEALLOCATE recurring_cursor;
    
    SELECT @ProcessedCount as ProcessedTransactions;
END;
GO

PRINT '‚úÖ Procedure sp_ProcessRecurringTransactions ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- Procedure c·∫≠p nh·∫≠t ng√¢n s√°ch ƒë√£ chi ti√™u
CREATE PROCEDURE sp_UpdateBudgetSpentAmount
    @UserID UNIQUEIDENTIFIER,
    @CategoryID UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    
    UPDATE b
    SET SpentAmount = ISNULL(spent.TotalSpent, 0),
        UpdatedAt = GETUTCDATE()
    FROM Budgets b
    LEFT JOIN (
        SELECT 
            t.CategoryID,
            SUM(t.Amount) as TotalSpent
        FROM Transactions t
        WHERE t.UserID = @UserID 
            AND t.CategoryID = @CategoryID
            AND t.Type = 'Expense'
        GROUP BY t.CategoryID
    ) spent ON b.CategoryID = spent.CategoryID
    WHERE b.UserID = @UserID 
        AND b.CategoryID = @CategoryID
        AND b.IsActive = 1;
END;
GO

PRINT '‚úÖ Procedure sp_UpdateBudgetSpentAmount ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- Procedure t·∫°o th√¥ng b√°o
CREATE PROCEDURE sp_CreateNotification
    @UserID UNIQUEIDENTIFIER,
    @Title NVARCHAR(200),
    @Message NVARCHAR(MAX),
    @Type NVARCHAR(50),
    @Priority NVARCHAR(20) = 'medium',
    @ActionUrl NVARCHAR(500) = NULL,
    @ExpiresAt DATETIME2 = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO Notifications (UserID, Title, Message, Type, Priority, ActionUrl, ExpiresAt)
    VALUES (@UserID, @Title, @Message, @Type, @Priority, @ActionUrl, @ExpiresAt);
    
    SELECT SCOPE_IDENTITY() as NotificationID;
END;
GO

PRINT '‚úÖ Procedure sp_CreateNotification ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- =============================================
-- B∆Ø·ªöC 7: T·∫†O TRIGGERS
-- =============================================

PRINT '‚ö° B∆Ø·ªöC 7: T·∫°o c√°c Triggers...';
GO

-- Trigger c·∫≠p nh·∫≠t UpdatedAt cho Users
CREATE TRIGGER tr_Users_UpdatedAt
ON Users
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE Users 
    SET UpdatedAt = GETUTCDATE()
    FROM Users u
    INNER JOIN inserted i ON u.UserID = i.UserID;
END;
GO

PRINT '‚úÖ Trigger tr_Users_UpdatedAt ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- Trigger c·∫≠p nh·∫≠t ng√¢n s√°ch khi c√≥ giao d·ªãch m·ªõi
CREATE TRIGGER tr_Transactions_UpdateBudget
ON Transactions
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;
    
    -- C·∫≠p nh·∫≠t cho transactions m·ªõi ho·∫∑c ƒë∆∞·ª£c s·ª≠a
    IF EXISTS (SELECT 1 FROM inserted)
    BEGIN
        UPDATE b
        SET SpentAmount = ISNULL(spent.TotalSpent, 0),
            UpdatedAt = GETUTCDATE()
        FROM Budgets b
        INNER JOIN inserted i ON b.UserID = i.UserID AND b.CategoryID = i.CategoryID
        LEFT JOIN (
            SELECT 
                t.UserID,
                t.CategoryID,
                SUM(t.Amount) as TotalSpent
            FROM Transactions t
            INNER JOIN inserted i2 ON t.UserID = i2.UserID AND t.CategoryID = i2.CategoryID
            WHERE t.Type = 'Expense'
            GROUP BY t.UserID, t.CategoryID
        ) spent ON b.UserID = spent.UserID AND b.CategoryID = spent.CategoryID
        WHERE b.IsActive = 1;
    END;
    
    -- C·∫≠p nh·∫≠t cho transactions b·ªã x√≥a
    IF EXISTS (SELECT 1 FROM deleted)
    BEGIN
        UPDATE b
        SET SpentAmount = ISNULL(spent.TotalSpent, 0),
            UpdatedAt = GETUTCDATE()
        FROM Budgets b
        INNER JOIN deleted d ON b.UserID = d.UserID AND b.CategoryID = d.CategoryID
        LEFT JOIN (
            SELECT 
                t.UserID,
                t.CategoryID,
                SUM(t.Amount) as TotalSpent
            FROM Transactions t
            INNER JOIN deleted d2 ON t.UserID = d2.UserID AND t.CategoryID = d2.CategoryID
            WHERE t.Type = 'Expense'
            GROUP BY t.UserID, t.CategoryID
        ) spent ON b.UserID = spent.UserID AND b.CategoryID = spent.CategoryID
        WHERE b.IsActive = 1;
    END;
END;
GO

PRINT '‚úÖ Trigger tr_Transactions_UpdateBudget ƒë√£ ƒë∆∞·ª£c t·∫°o';
GO

-- =============================================
-- B∆Ø·ªöC 8: CH√àN D·ªÆ LI·ªÜU M·∫∂C ƒê·ªäNH
-- =============================================

PRINT 'üìù B∆Ø·ªöC 8: Ch√®n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh...';

-- Insert default categories v·ªõi DEFAULT_CATEGORIES_USER_ID
DECLARE @DefaultUserID UNIQUEIDENTIFIER = '00000000-0000-0000-0000-000000000000';

-- Categories Thu nh·∫≠p
INSERT INTO Categories (UserID, CategoryName, Type, Icon, Color, Description, SortOrder) VALUES
(@DefaultUserID, N'L∆∞∆°ng', 'Income', 'salary', '#27ae60', N'L∆∞∆°ng c∆° b·∫£n h√†ng th√°ng', 1),
(@DefaultUserID, N'Th∆∞·ªüng', 'Income', 'bonus', '#f39c12', N'Th∆∞·ªüng hi·ªáu su·∫•t, th∆∞·ªüng l·ªÖ t·∫øt', 2),
(@DefaultUserID, N'Ph·ª• c·∫•p', 'Income', 'allowance', '#3498db', N'Ph·ª• c·∫•p xƒÉng xe, ƒÉn tr∆∞a, ƒëi·ªán tho·∫°i', 3),
(@DefaultUserID, N'ƒê·∫ßu t∆∞', 'Income', 'investment', '#9b59b6', N'L·ª£i nhu·∫≠n t·ª´ ƒë·∫ßu t∆∞, c·ªï t·ª©c', 4),
(@DefaultUserID, N'Kinh doanh', 'Income', 'business', '#e67e22', N'Thu nh·∫≠p t·ª´ kinh doanh ri√™ng', 5),
(@DefaultUserID, N'Freelance', 'Income', 'freelance', '#1abc9c', N'Thu nh·∫≠p t·ª´ c√¥ng vi·ªác t·ª± do', 6),
(@DefaultUserID, N'Thu nh·∫≠p kh√°c', 'Income', 'other', '#95a5a6', N'C√°c kho·∫£n thu nh·∫≠p kh√°c', 7);

-- Categories Chi ti√™u
INSERT INTO Categories (UserID, CategoryName, Type, Icon, Color, Description, SortOrder) VALUES
(@DefaultUserID, N'ƒÇn u·ªëng', 'Expense', 'food', '#e74c3c', N'Chi ph√≠ ƒÉn u·ªëng h√†ng ng√†y', 1),
(@DefaultUserID, N'ƒêi l·∫°i', 'Expense', 'transport', '#3498db', N'XƒÉng xe, xe bus, taxi, grab', 2),
(@DefaultUserID, N'H·ªçc t·∫≠p', 'Expense', 'education', '#9b59b6', N'H·ªçc ph√≠, s√°ch v·ªü, kh√≥a h·ªçc', 3),
(@DefaultUserID, N'Gi·∫£i tr√≠', 'Expense', 'entertainment', '#f39c12', N'Xem phim, du l·ªãch, game', 4),
(@DefaultUserID, N'Y t·∫ø', 'Expense', 'healthcare', '#e67e22', N'Kh√°m b·ªánh, thu·ªëc men, b·∫£o hi·ªÉm', 5),
(@DefaultUserID, N'Mua s·∫Øm', 'Expense', 'shopping', '#e91e63', N'Qu·∫ßn √°o, m·ªπ ph·∫©m, ƒë·ªì d√πng', 6),
(@DefaultUserID, N'H√≥a ƒë∆°n', 'Expense', 'bills', '#607d8b', N'ƒêi·ªán, n∆∞·ªõc, internet, ƒëi·ªán tho·∫°i', 7),
(@DefaultUserID, N'Nh√† ·ªü', 'Expense', 'housing', '#795548', N'Ti·ªÅn thu√™ nh√†, s·ª≠a ch·ªØa', 8),
(@DefaultUserID, N'B·∫£o hi·ªÉm', 'Expense', 'insurance', '#455a64', N'B·∫£o hi·ªÉm xe, nh√†, s·ª©c kh·ªèe', 9),
(@DefaultUserID, N'Ti·∫øt ki·ªám', 'Expense', 'savings', '#4caf50', N'G·ª≠i ti·∫øt ki·ªám, ƒë·∫ßu t∆∞', 10),
(@DefaultUserID, N'Chi ti√™u kh√°c', 'Expense', 'other', '#95a5a6', N'C√°c kho·∫£n chi ti√™u kh√°c', 11);

PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' default categories';

-- Insert sample user v·ªõi bcrypt hashed password cho "123456"
DECLARE @UserID UNIQUEIDENTIFIER = NEWID();
INSERT INTO Users (UserID, Email, PasswordHash, FirstName, LastName, PhoneNumber, IsEmailVerified)
VALUES (@UserID, 'nguoidung@vidu.com', '$2a$12$rG0k0U2JzTY/yXz2fey.0eJ6H8A2QzKq6O3jD0WJZ6yFvDQ2q9.0G', N'Nguy·ªÖn', N'VƒÉn A', '0123456789', 1);
PRINT '‚úÖ ƒê√£ t·∫°o user m·∫´u v·ªõi email: nguoidung@vidu.com v√† m·∫≠t kh·∫©u: 123456';

-- T·∫°o categories cho user m·∫´u
EXEC sp_CreateDefaultCategoriesForUser @UserID;
PRINT '‚úÖ ƒê√£ t·∫°o categories cho user m·∫´u';

-- Insert sample transactions v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
DECLARE @SalaryCategoryID UNIQUEIDENTIFIER, @FoodCategoryID UNIQUEIDENTIFIER, @TransportCategoryID UNIQUEIDENTIFIER;
DECLARE @BillsCategoryID UNIQUEIDENTIFIER, @EntertainmentCategoryID UNIQUEIDENTIFIER, @BonusCategoryID UNIQUEIDENTIFIER;

SELECT @SalaryCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'L∆∞∆°ng';
SELECT @FoodCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'ƒÇn u·ªëng';
SELECT @TransportCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'ƒêi l·∫°i';
SELECT @BillsCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'H√≥a ƒë∆°n';
SELECT @EntertainmentCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'Gi·∫£i tr√≠';
SELECT @BonusCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'Th∆∞·ªüng';

-- Giao d·ªãch th√°ng 1/2025
INSERT INTO Transactions (UserID, CategoryID, Amount, Type, TransactionDate, Description, PaymentMethod) VALUES
(@UserID, @SalaryCategoryID, 15000000, 'Income', '2025-01-01', N'L∆∞∆°ng th√°ng 1/2025', 'Bank Transfer'),
(@UserID, @BonusCategoryID, 2000000, 'Income', '2025-01-05', N'Th∆∞·ªüng T·∫øt Nguy√™n ƒê√°n', 'Bank Transfer'),
(@UserID, @FoodCategoryID, 350000, 'Expense', '2025-01-02', N'ƒÇn s√°ng - Ph·ªü b√≤', 'Cash'),
(@UserID, @FoodCategoryID, 450000, 'Expense', '2025-01-02', N'ƒÇn tr∆∞a - C∆°m vƒÉn ph√≤ng', 'E-Wallet'),
(@UserID, @TransportCategoryID, 120000, 'Expense', '2025-01-02', N'Grab ƒëi l√†m', 'E-Wallet'),
(@UserID, @BillsCategoryID, 850000, 'Expense', '2025-01-03', N'Ti·ªÅn ƒëi·ªán th√°ng 12/2024', 'Bank Transfer'),
(@UserID, @BillsCategoryID, 320000, 'Expense', '2025-01-03', N'Ti·ªÅn n∆∞·ªõc th√°ng 12/2024', 'Bank Transfer'),
(@UserID, @EntertainmentCategoryID, 280000, 'Expense', '2025-01-04', N'Xem phim CGV', 'Credit Card'),
(@UserID, @FoodCategoryID, 680000, 'Expense', '2025-01-05', N'ƒÇn t·ªëi - L·∫©u Th√°i', 'Credit Card');

PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' transactions m·∫´u';

-- Insert sample budgets
INSERT INTO Budgets (UserID, CategoryID, BudgetName, BudgetAmount, Period, StartDate, EndDate, AlertThreshold)
VALUES 
(@UserID, @FoodCategoryID, N'Ng√¢n s√°ch ƒÉn u·ªëng th√°ng 1', 3000000, 'monthly', '2025-01-01', '2025-01-31', 80),
(@UserID, @TransportCategoryID, N'Ng√¢n s√°ch ƒëi l·∫°i th√°ng 1', 1500000, 'monthly', '2025-01-01', '2025-01-31', 75),
(@UserID, @EntertainmentCategoryID, N'Ng√¢n s√°ch gi·∫£i tr√≠ th√°ng 1', 2000000, 'monthly', '2025-01-01', '2025-01-31', 85);

PRINT '‚úÖ ƒê√£ t·∫°o ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' budgets m·∫´u';

-- Insert sample settings
INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category, Description)
VALUES
(@UserID, 'general.currency', 'VND', 'string', 'general', N'ƒê∆°n v·ªã ti·ªÅn t·ªá m·∫∑c ƒë·ªãnh'),
(@UserID, 'general.language', 'vi', 'string', 'general', N'Ng√¥n ng·ªØ giao di·ªán'),
(@UserID, 'general.timezone', 'Asia/Ho_Chi_Minh', 'string', 'general', N'm√∫i gi·ªù'),
(@UserID, 'appearance.theme', 'light', 'string', 'appearance', N'Giao di·ªán s√°ng/t·ªëi'),
(@UserID, 'appearance.color_scheme', 'blue', 'string', 'appearance', N'B·∫£ng m√†u ch·ªß ƒë·∫°o'),
(@UserID, 'notifications.push', 'true', 'boolean', 'notifications', N'Th√¥ng b√°o ƒë·∫©y'),
(@UserID, 'notifications.email', 'true', 'boolean', 'notifications', N'Th√¥ng b√°o email'),
(@UserID, 'notifications.budget', 'true', 'boolean', 'notifications', N'C·∫£nh b√°o ng√¢n s√°ch'),
(@UserID, 'notifications.recurring', 'true', 'boolean', 'notifications', N'Nh·∫Øc nh·ªü giao d·ªãch ƒë·ªãnh k·ª≥'),
(@UserID, 'privacy.show_profile', 'true', 'boolean', 'privacy', N'Hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n'),
(@UserID, 'privacy.share_data', 'false', 'boolean', 'privacy', N'Chia s·∫ª d·ªØ li·ªáu th·ªëng k√™'),
(@UserID, 'backup.auto_backup', 'true', 'boolean', 'backup', N'T·ª± ƒë·ªông sao l∆∞u'),
(@UserID, 'backup.backup_frequency', 'weekly', 'string', 'backup', N'T·∫ßn su·∫•t sao l∆∞u');

PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' settings m·∫´u';

-- Insert sample notifications
INSERT INTO Notifications (UserID, Title, Message, Type, Priority, IsRead)
VALUES
(@UserID, N'üéâ Ch√†o m·ª´ng b·∫°n!', N'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng Qu·∫£n L√Ω T√†i Ch√≠nh C√° Nh√¢n. H√£y b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác th√™m giao d·ªãch ƒë·∫ßu ti√™n c·ªßa b·∫°n!', 'welcome', 'medium', 0),
(@UserID, N'üí∞ L∆∞∆°ng ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n', N'L∆∞∆°ng th√°ng 1/2025 (15,000,000 VND) ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√†i kho·∫£n c·ªßa b·∫°n.', 'income', 'low', 1),
(@UserID, N'‚ö†Ô∏è C·∫£nh b√°o ng√¢n s√°ch', N'B·∫°n ƒë√£ s·ª≠ d·ª•ng 52% ng√¢n s√°ch ƒÉn u·ªëng trong th√°ng n√†y. H√£y ch√∫ √Ω chi ti√™u!', 'budget', 'medium', 0),
(@UserID, N'üìä B√°o c√°o tu·∫ßn', N'B√°o c√°o t√†i ch√≠nh tu·∫ßn n√†y ƒë√£ s·∫µn s√†ng. B·∫°n ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c 2,150,000 VND.', 'report', 'low', 0);

PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' notifications m·∫´u';

-- Insert sample recurring transaction
INSERT INTO RecurringTransactions (UserID, CategoryID, Description, Amount, Type, Frequency, StartDate, NextDueDate)
VALUES 
(@UserID, @SalaryCategoryID, N'L∆∞∆°ng h√†ng th√°ng', 15000000, 'Income', 'Monthly', '2025-01-01', '2025-02-01'),
(@UserID, @BillsCategoryID, N'Ti·ªÅn ƒëi·ªán h√†ng th√°ng', 800000, 'Expense', 'Monthly', '2025-01-03', '2025-02-03');

PRINT '‚úÖ ƒê√£ t·∫°o ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' recurring transactions m·∫´u';

-- C·∫≠p nh·∫≠t spent amount cho budgets
EXEC sp_UpdateBudgetSpentAmount @UserID, @FoodCategoryID;
EXEC sp_UpdateBudgetSpentAmount @UserID, @TransportCategoryID;
EXEC sp_UpdateBudgetSpentAmount @UserID, @EntertainmentCategoryID;

PRINT '‚úÖ ƒê√£ c·∫≠p nh·∫≠t spent amount cho budgets';
GO

-- =============================================
-- B∆Ø·ªöC 9: T·∫†O JOB SCHEDULER (SQL AGENT)
-- =============================================

PRINT '‚è∞ B∆Ø·ªöC 9: T·∫°o SQL Agent Jobs...';

-- Job x·ª≠ l√Ω giao d·ªãch ƒë·ªãnh k·ª≥ h√†ng ng√†y
IF NOT EXISTS (SELECT name FROM msdb.dbo.sysjobs WHERE name = 'PersonalFinance_ProcessRecurringTransactions')
BEGIN
    EXEC msdb.dbo.sp_add_job
        @job_name = 'PersonalFinance_ProcessRecurringTransactions',
        @description = 'X·ª≠ l√Ω giao d·ªãch ƒë·ªãnh k·ª≥ h√†ng ng√†y cho Personal Finance Manager';
    
    EXEC msdb.dbo.sp_add_jobstep
        @job_name = 'PersonalFinance_ProcessRecurringTransactions',
        @step_name = 'Process Recurring Transactions',
        @command = 'EXEC PersonalFinanceDB.dbo.sp_ProcessRecurringTransactions',
        @database_name = 'PersonalFinanceDB';
    
    EXEC msdb.dbo.sp_add_schedule
        @schedule_name = 'Daily_6AM',
        @freq_type = 4, -- Daily
        @freq_interval = 1,
        @active_start_time = 060000; -- 6:00 AM
    
    EXEC msdb.dbo.sp_attach_schedule
        @job_name = 'PersonalFinance_ProcessRecurringTransactions',
        @schedule_name = 'Daily_6AM';
    
    EXEC msdb.dbo.sp_add_jobserver
        @job_name = 'PersonalFinance_ProcessRecurringTransactions';
    
    PRINT '‚úÖ Job ProcessRecurringTransactions ƒë√£ ƒë∆∞·ª£c t·∫°o';
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è Job ProcessRecurringTransactions ƒë√£ t·ªìn t·∫°i';
END
GO

-- =============================================
-- B∆Ø·ªöC 10: TH·ªêNG K√ä V√Ä HO√ÄN T·∫§T
-- =============================================

PRINT '';
PRINT 'üéâ THI·∫æT L·∫¨P DATABASE HO√ÄN T·∫§T!';
PRINT '';
PRINT 'üìã TH√îNG TIN ƒêƒÇNG NH·∫¨P M·∫™U:';
PRINT '   üìß Email: nguoidung@vidu.com';
PRINT '   üîë M·∫≠t kh·∫©u: 123456';
PRINT '';
PRINT 'üìä TH·ªêNG K√ä DATABASE:';

-- ƒê·∫øm v√† hi·ªÉn th·ªã s·ªë l∆∞·ª£ng records
DECLARE @UserCount INT, @CategoryCount INT, @TransactionCount INT, @BudgetCount INT;
DECLARE @SettingCount INT, @NotificationCount INT, @RecurringCount INT;

SELECT @UserCount = COUNT(*) FROM Users;
SELECT @CategoryCount = COUNT(*) FROM Categories;
SELECT @TransactionCount = COUNT(*) FROM Transactions;
SELECT @BudgetCount = COUNT(*) FROM Budgets;
SELECT @SettingCount = COUNT(*) FROM UserSettings;
SELECT @NotificationCount = COUNT(*) FROM Notifications;
SELECT @RecurringCount = COUNT(*) FROM RecurringTransactions;

PRINT '   - Users: ' + CAST(@UserCount AS NVARCHAR);
PRINT '   - Categories: ' + CAST(@CategoryCount AS NVARCHAR);
PRINT '   - Transactions: ' + CAST(@TransactionCount AS NVARCHAR);
PRINT '   - Budgets: ' + CAST(@BudgetCount AS NVARCHAR);
PRINT '   - UserSettings: ' + CAST(@SettingCount AS NVARCHAR);
PRINT '   - Notifications: ' + CAST(@NotificationCount AS NVARCHAR);
PRINT '   - RecurringTransactions: ' + CAST(@RecurringCount AS NVARCHAR);
PRINT '';

PRINT 'üîß C√ÅC OBJECTS ƒê√É T·∫†O:';
PRINT '   - Tables: 10 b·∫£ng ch√≠nh';
PRINT '   - Views: 3 views th·ªëng k√™';
PRINT '   - Functions: 2 functions ti·ªán √≠ch';
PRINT '   - Stored Procedures: 4 procedures';
PRINT '   - Triggers: 2 triggers t·ª± ƒë·ªông';
PRINT '   - Indexes: 20+ indexes t·ªëi ∆∞u';
PRINT '   - SQL Agent Jobs: 1 job t·ª± ƒë·ªông';
PRINT '';

PRINT 'üöÄ S·∫¥N S√ÄNG S·ª¨ D·ª§NG PERSONAL FINANCE MANAGER!';
PRINT 'üë§ T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch';
PRINT 'üìÖ Ho√†n th√†nh: ' + CONVERT(NVARCHAR, GETDATE(), 120);
PRINT 'üíé B·∫£n quy·ªÅn: ¬© Ti·ªÉu Nh·∫•t B·∫°ch 2025';
PRINT '';
PRINT 'üîó TH√îNG TIN K·∫æT N·ªêI:';
PRINT '   Server: TIEUNHATBACH666\TIEUNHATBACH';
PRINT '   Database: PersonalFinanceDB';
PRINT '   Login: sa / Password: 123456';
PRINT '';
PRINT 'üéØ Ch·ªâ c·∫ßn ch·∫°y file n√†y l√† c√≥ th·ªÉ s·ª≠ d·ª•ng ngay!';
PRINT 'üìñ ƒê·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng:';
PRINT '   Backend: cd backend && npm run dev';
PRINT '   Frontend: cd frontend && npm run dev';
PRINT '';
PRINT '‚ú® DATABASE ƒê√É S·∫¥N S√ÄNG V·ªöI ƒê·∫¶Y ƒê·ª¶ CH·ª®C NƒÇNG!';

-- End of script
-- ¬© Ti·ªÉu Nh·∫•t B·∫°ch 2025