-- =============================================
-- PERSONAL FINANCE MANAGER - THI·∫æT L·∫¨P DATABASE HO√ÄN CH·ªàNH
-- T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch
-- M√¥ t·∫£: File SQL duy nh·∫•t ƒë·ªÉ thi·∫øt l·∫≠p ho√†n ch·ªânh to√†n b·ªô database
-- Phi√™n b·∫£n: 1.0 - Ho√†n ch·ªânh
-- =============================================

-- C·∫•u h√¨nh k·∫øt n·ªëi:
-- Server: TIEUNHATBACH\TIEUNHATBACH
-- Login: sa / Password: 123456
-- Database: PersonalFinanceDB

USE master;
GO

PRINT 'üöÄ B·∫ÆT ƒê·∫¶U THI·∫æT L·∫¨P PERSONAL FINANCE MANAGER DATABASE';
PRINT 'üìÖ Th·ªùi gian: ' + CONVERT(NVARCHAR, GETDATE(), 120);
PRINT 'üë§ T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch';
PRINT 'üéØ M·ª•c ti√™u: T·∫°o database ho√†n ch·ªânh ch·ªâ v·ªõi 1 file SQL';
PRINT '';

-- =============================================
-- B∆Ø·ªöC 1: T·∫†O DATABASE
-- =============================================

PRINT 'üìä B∆Ø·ªöC 1: T·∫°o Database PersonalFinanceDB...';

IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'PersonalFinanceDB')
BEGIN
    CREATE DATABASE PersonalFinanceDB;
    PRINT '‚úÖ Database PersonalFinanceDB ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng';
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è Database PersonalFinanceDB ƒë√£ t·ªìn t·∫°i - s·∫Ω thi·∫øt l·∫≠p l·∫°i';
END
GO

-- ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ database ƒë∆∞·ª£c t·∫°o ho√†n to√†n
WAITFOR DELAY '00:00:02';
GO

USE PersonalFinanceDB;
GO

-- =============================================
-- B∆Ø·ªöC 2: X√ìA C√ÅC B·∫¢NG C≈® (N·∫æU C√ì)
-- =============================================

PRINT 'üóëÔ∏è B∆Ø·ªöC 2: X√≥a c√°c b·∫£ng c≈© ƒë·ªÉ thi·∫øt l·∫≠p l·∫°i...';

-- X√≥a theo th·ª© t·ª± ƒë·ªÉ tr√°nh l·ªói foreign key
IF OBJECT_ID('RecurringTransactionHistory', 'U') IS NOT NULL DROP TABLE RecurringTransactionHistory;
IF OBJECT_ID('RecurringTransactions', 'U') IS NOT NULL DROP TABLE RecurringTransactions;
IF OBJECT_ID('BackupHistory', 'U') IS NOT NULL DROP TABLE BackupHistory;
IF OBJECT_ID('Notifications', 'U') IS NOT NULL DROP TABLE Notifications;
IF OBJECT_ID('UserSettings', 'U') IS NOT NULL DROP TABLE UserSettings;
IF OBJECT_ID('Budgets', 'U') IS NOT NULL DROP TABLE Budgets;
IF OBJECT_ID('Transactions', 'U') IS NOT NULL DROP TABLE Transactions;
IF OBJECT_ID('Categories', 'U') IS NOT NULL DROP TABLE Categories;
IF OBJECT_ID('Users', 'U') IS NOT NULL DROP TABLE Users;

-- X√≥a c√°c views v√† functions c≈©
IF OBJECT_ID('vw_TransactionSummary', 'V') IS NOT NULL DROP VIEW vw_TransactionSummary;
IF OBJECT_ID('fn_GetBudgetProgress', 'TF') IS NOT NULL DROP FUNCTION fn_GetBudgetProgress;

-- X√≥a c√°c stored procedures c≈©
IF OBJECT_ID('sp_CreateDefaultCategoriesForUser', 'P') IS NOT NULL DROP PROCEDURE sp_CreateDefaultCategoriesForUser;
IF OBJECT_ID('sp_ProcessRecurringTransactions', 'P') IS NOT NULL DROP PROCEDURE sp_ProcessRecurringTransactions;
IF OBJECT_ID('sp_DailyRecurringTransactionJob', 'P') IS NOT NULL DROP PROCEDURE sp_DailyRecurringTransactionJob;
IF OBJECT_ID('sp_GetUserSettings', 'P') IS NOT NULL DROP PROCEDURE sp_GetUserSettings;
IF OBJECT_ID('sp_GetUserNotifications', 'P') IS NOT NULL DROP PROCEDURE sp_GetUserNotifications;
IF OBJECT_ID('sp_CreateNotification', 'P') IS NOT NULL DROP PROCEDURE sp_CreateNotification;

PRINT '‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ c√°c objects c≈©';

-- =============================================
-- B∆Ø·ªöC 3: T·∫†O C√ÅC B·∫¢NG CH√çNH
-- =============================================

PRINT 'üèóÔ∏è B∆Ø·ªöC 3: T·∫°o c√°c b·∫£ng ch√≠nh...';

-- B·∫£ng Users - Ng∆∞·ªùi d√πng
CREATE TABLE Users (
    UserID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    Email NVARCHAR(255) UNIQUE NOT NULL,
    PasswordHash NVARCHAR(255) NOT NULL,
    FirstName NVARCHAR(100) NOT NULL,
    LastName NVARCHAR(100) NOT NULL,
    PhoneNumber NVARCHAR(20),
    AvatarURL NVARCHAR(500) NULL,
    Currency NVARCHAR(10) DEFAULT 'VND',
    Language NVARCHAR(10) DEFAULT 'vi-VN',
    TimeZone NVARCHAR(50) DEFAULT 'Asia/Ho_Chi_Minh',
    IsEmailVerified BIT DEFAULT 0,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE()
);
PRINT '‚úÖ B·∫£ng Users ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Categories - Danh m·ª•c thu chi
CREATE TABLE Categories (
    CategoryID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NULL, -- NULL cho default categories
    CategoryName NVARCHAR(100) NOT NULL,
    Type NVARCHAR(20) CHECK (Type IN ('Income', 'Expense')) NOT NULL,
    Icon NVARCHAR(50) DEFAULT 'default',
    Color NVARCHAR(7) DEFAULT '#3498db',
    ParentCategoryID UNIQUEIDENTIFIER NULL,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (ParentCategoryID) REFERENCES Categories(CategoryID)
);
PRINT '‚úÖ B·∫£ng Categories ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Transactions - Giao d·ªãch
CREATE TABLE Transactions (
    TransactionID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    Amount DECIMAL(15,2) NOT NULL,
    Type NVARCHAR(20) CHECK (Type IN ('Income', 'Expense')) NOT NULL,
    Description NVARCHAR(500),
    TransactionDate DATE NOT NULL,
    ReceiptURL NVARCHAR(500) NULL,
    Tags NVARCHAR(500) NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);
PRINT '‚úÖ B·∫£ng Transactions ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Budgets - Ng√¢n s√°ch
CREATE TABLE Budgets (
    BudgetID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    BudgetName NVARCHAR(100) NOT NULL,
    BudgetAmount DECIMAL(15,2) NOT NULL,
    Period NVARCHAR(20) CHECK (Period IN ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')) NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NOT NULL,
    AlertThreshold DECIMAL(5,2) DEFAULT 80.00 CHECK (AlertThreshold BETWEEN 0 AND 100),
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);
PRINT '‚úÖ B·∫£ng Budgets ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng UserSettings - C√†i ƒë·∫∑t ng∆∞·ªùi d√πng
CREATE TABLE UserSettings (
    SettingID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    SettingKey NVARCHAR(100) NOT NULL,
    SettingValue NVARCHAR(MAX) NOT NULL,
    SettingType NVARCHAR(20) NOT NULL DEFAULT 'string',
    Category NVARCHAR(50) NOT NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    UNIQUE (UserID, SettingKey)
);
PRINT '‚úÖ B·∫£ng UserSettings ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng Notifications - Th√¥ng b√°o
CREATE TABLE Notifications (
    NotificationID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    Title NVARCHAR(200) NOT NULL,
    Message NVARCHAR(MAX) NOT NULL,
    Type NVARCHAR(50) NOT NULL,
    Priority NVARCHAR(20) NOT NULL DEFAULT 'medium',
    IsRead BIT DEFAULT 0,
    IsArchived BIT DEFAULT 0,
    ActionUrl NVARCHAR(500) NULL,
    ExpiresAt DATETIME2 NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    ReadAt DATETIME2 NULL,
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
PRINT '‚úÖ B·∫£ng Notifications ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng RecurringTransactions - Giao d·ªãch ƒë·ªãnh k·ª≥
CREATE TABLE RecurringTransactions (
    RecurringID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    CategoryID UNIQUEIDENTIFIER NOT NULL,
    Description NVARCHAR(255) NOT NULL,
    Amount DECIMAL(15,2) NOT NULL,
    Type NVARCHAR(10) CHECK (Type IN ('Income', 'Expense')) NOT NULL,
    Frequency NVARCHAR(20) CHECK (Frequency IN ('Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly')) NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NULL,
    NextDueDate DATE NOT NULL,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    UpdatedAt DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID) ON DELETE CASCADE
);
PRINT '‚úÖ B·∫£ng RecurringTransactions ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng RecurringTransactionHistory - L·ªãch s·ª≠ giao d·ªãch ƒë·ªãnh k·ª≥
CREATE TABLE RecurringTransactionHistory (
    HistoryID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    RecurringID UNIQUEIDENTIFIER NOT NULL,
    TransactionID UNIQUEIDENTIFIER NOT NULL,
    GeneratedDate DATETIME2 DEFAULT GETUTCDATE(),
    
    FOREIGN KEY (RecurringID) REFERENCES RecurringTransactions(RecurringID) ON DELETE CASCADE,
    FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID) ON DELETE CASCADE
);
PRINT '‚úÖ B·∫£ng RecurringTransactionHistory ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- B·∫£ng BackupHistory - L·ªãch s·ª≠ sao l∆∞u
CREATE TABLE BackupHistory (
    BackupID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    UserID UNIQUEIDENTIFIER NOT NULL,
    BackupType NVARCHAR(20) NOT NULL,
    BackupSize BIGINT NULL,
    Status NVARCHAR(20) NOT NULL DEFAULT 'pending',
    ErrorMessage NVARCHAR(MAX) NULL,
    CreatedAt DATETIME2 DEFAULT GETUTCDATE(),
    CompletedAt DATETIME2 NULL,
    
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
PRINT '‚úÖ B·∫£ng BackupHistory ƒë√£ ƒë∆∞·ª£c t·∫°o';

-- =============================================
-- B∆Ø·ªöC 4: T·∫†O INDEXES CHO HI·ªÜU SU·∫§T
-- =============================================

PRINT 'üìä B∆Ø·ªöC 4: T·∫°o indexes cho hi·ªáu su·∫•t...';

-- Indexes cho b·∫£ng Transactions
CREATE INDEX IX_Transactions_UserID_Date ON Transactions(UserID, TransactionDate DESC);
CREATE INDEX IX_Transactions_CategoryID ON Transactions(CategoryID);
CREATE INDEX IX_Transactions_Type_Date ON Transactions(Type, TransactionDate DESC);

-- Indexes cho b·∫£ng Categories
CREATE INDEX IX_Categories_UserID_Type ON Categories(UserID, Type);
CREATE INDEX IX_Categories_Type_Active ON Categories(Type, IsActive);

-- Indexes cho b·∫£ng Budgets
CREATE INDEX IX_Budgets_UserID_Period ON Budgets(UserID, Period);
CREATE INDEX IX_Budgets_CategoryID ON Budgets(CategoryID);
CREATE INDEX IX_Budgets_StartDate_EndDate ON Budgets(StartDate, EndDate);

-- Indexes cho b·∫£ng UserSettings
CREATE INDEX IX_UserSettings_UserID_Category ON UserSettings(UserID, Category);

-- Indexes cho b·∫£ng Notifications
CREATE INDEX IX_Notifications_UserID_IsRead_CreatedAt ON Notifications(UserID, IsRead, CreatedAt DESC);
CREATE INDEX IX_Notifications_Type_Priority ON Notifications(Type, Priority);

-- Indexes cho b·∫£ng RecurringTransactions
CREATE INDEX IX_RecurringTransactions_UserID ON RecurringTransactions(UserID);
CREATE INDEX IX_RecurringTransactions_NextDueDate ON RecurringTransactions(NextDueDate);
CREATE INDEX IX_RecurringTransactions_IsActive ON RecurringTransactions(IsActive);

-- Indexes cho b·∫£ng BackupHistory
CREATE INDEX IX_BackupHistory_UserID_CreatedAt ON BackupHistory(UserID, CreatedAt DESC);

PRINT '‚úÖ T·∫•t c·∫£ indexes ƒë√£ ƒë∆∞·ª£c t·∫°o ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t';

-- =============================================
-- B∆Ø·ªöC 5: CH√àN D·ªÆ LI·ªÜU M·∫∂C ƒê·ªäNH
-- =============================================

PRINT 'üìù B∆Ø·ªöC 5: Ch√®n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh...';

-- Insert default categories v·ªõi DEFAULT_CATEGORIES_USER_ID
DECLARE @DefaultUserID UNIQUEIDENTIFIER = '00000000-0000-0000-0000-000000000000';

-- Categories Thu nh·∫≠p
INSERT INTO Categories (UserID, CategoryName, Type, Icon, Color) VALUES
(@DefaultUserID, N'L∆∞∆°ng', 'Income', 'salary', '#27ae60'),
(@DefaultUserID, N'Th∆∞·ªüng', 'Income', 'bonus', '#f39c12'),
(@DefaultUserID, N'Ph·ª• c·∫•p', 'Income', 'allowance', '#3498db'),
(@DefaultUserID, N'ƒê·∫ßu t∆∞', 'Income', 'investment', '#9b59b6'),
(@DefaultUserID, N'Kinh doanh', 'Income', 'business', '#e67e22'),
(@DefaultUserID, N'Thu nh·∫≠p kh√°c', 'Income', 'other', '#95a5a6');

-- Categories Chi ti√™u
INSERT INTO Categories (UserID, CategoryName, Type, Icon, Color) VALUES
(@DefaultUserID, N'ƒÇn u·ªëng', 'Expense', 'food', '#e74c3c'),
(@DefaultUserID, N'ƒêi l·∫°i', 'Expense', 'transport', '#3498db'),
(@DefaultUserID, N'H·ªçc t·∫≠p', 'Expense', 'education', '#9b59b6'),
(@DefaultUserID, N'Gi·∫£i tr√≠', 'Expense', 'entertainment', '#f39c12'),
(@DefaultUserID, N'Y t·∫ø', 'Expense', 'healthcare', '#e67e22'),
(@DefaultUserID, N'Mua s·∫Øm', 'Expense', 'shopping', '#e91e63'),
(@DefaultUserID, N'H√≥a ƒë∆°n', 'Expense', 'bills', '#607d8b'),
(@DefaultUserID, N'Nh√† ·ªü', 'Expense', 'housing', '#795548'),
(@DefaultUserID, N'Qu·∫ßn √°o', 'Expense', 'clothing', '#ff5722'),
(@DefaultUserID, N'Chi ti√™u kh√°c', 'Expense', 'other', '#95a5a6');

PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' default categories';

-- Insert sample user v·ªõi bcrypt hashed password cho "123456"
DECLARE @UserID UNIQUEIDENTIFIER = NEWID();
INSERT INTO Users (UserID, Email, PasswordHash, FirstName, LastName, PhoneNumber)
VALUES (@UserID, 'nguoidung@vidu.com', '$2a$12$rG0k0U2JzTY/yXz2fey.0eJ6H8A2QzKq6O3jD0WJZ6yFvDQ2q9.0G', N'Nguy·ªÖn', N'VƒÉn A', '0123456789');
PRINT '‚úÖ ƒê√£ t·∫°o user m·∫´u v·ªõi email: nguoidung@vidu.com v√† m·∫≠t kh·∫©u: 123456';

-- Insert categories cho user
INSERT INTO Categories (UserID, CategoryName, Type, Icon, Color)
SELECT @UserID, CategoryName, Type, Icon, Color
FROM Categories WHERE UserID = @DefaultUserID;
PRINT '‚úÖ ƒê√£ sao ch√©p categories cho user m·∫´u';

-- Insert sample transactions
DECLARE @SalaryCategoryID UNIQUEIDENTIFIER;
DECLARE @FoodCategoryID UNIQUEIDENTIFIER;
DECLARE @TransportCategoryID UNIQUEIDENTIFIER;

SELECT @SalaryCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'L∆∞∆°ng';
SELECT @FoodCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'ƒÇn u·ªëng';
SELECT @TransportCategoryID = CategoryID FROM Categories WHERE UserID = @UserID AND CategoryName = N'ƒêi l·∫°i';

INSERT INTO Transactions (UserID, CategoryID, Amount, Type, TransactionDate, Description) VALUES
(@UserID, @SalaryCategoryID, 15000000, 'Income', '2025-09-01', N'L∆∞∆°ng th√°ng 9'),
(@UserID, @FoodCategoryID, 250000, 'Expense', '2025-09-02', N'ƒÇn s√°ng'),
(@UserID, @TransportCategoryID, 50000, 'Expense', '2025-09-02', N'ƒêi xe bus'),
(@UserID, @FoodCategoryID, 180000, 'Expense', '2025-09-03', N'ƒÇn tr∆∞a');
PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' transactions m·∫´u';

-- Insert sample budget
INSERT INTO Budgets (UserID, CategoryID, BudgetName, BudgetAmount, Period, StartDate, EndDate)
VALUES (@UserID, @FoodCategoryID, N'Ng√¢n s√°ch ƒÉn u·ªëng', 2000000, 'monthly', '2025-09-01', '2025-09-30');
PRINT '‚úÖ ƒê√£ t·∫°o budget m·∫´u';

-- Insert sample settings
INSERT INTO UserSettings (UserID, SettingKey, SettingValue, SettingType, Category)
VALUES
(@UserID, 'general.currency', 'VND', 'string', 'general'),
(@UserID, 'general.language', 'vi', 'string', 'general'),
(@UserID, 'appearance.theme', 'light', 'string', 'appearance'),
(@UserID, 'notifications.push', 'true', 'boolean', 'notifications'),
(@UserID, 'notifications.email', 'true', 'boolean', 'notifications'),
(@UserID, 'notifications.budget', 'true', 'boolean', 'notifications'),
(@UserID, 'privacy.show_profile', 'true', 'boolean', 'privacy'),
(@UserID, 'privacy.share_data', 'false', 'boolean', 'privacy'),
(@UserID, 'backup.auto_backup', 'true', 'boolean', 'backup');
PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' settings m·∫´u';

-- Insert sample notifications
INSERT INTO Notifications (UserID, Title, Message, Type, Priority, IsRead)
VALUES
(@UserID, N'Ch√†o m·ª´ng b·∫°n', N'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng Qu·∫£n L√Ω T√†i Ch√≠nh C√° Nh√¢n', 'welcome', 'medium', 0),
(@UserID, N'V∆∞·ª£t ng√¢n s√°ch', N'B·∫°n ƒë√£ v∆∞·ª£t qu√° ng√¢n s√°ch cho danh m·ª•c ƒÇn u·ªëng', 'budget', 'high', 0);
PRINT '‚úÖ ƒê√£ ch√®n ' + CAST(@@ROWCOUNT AS NVARCHAR) + ' notifications m·∫´u';

PRINT '';
PRINT 'üéâ THI·∫æT L·∫¨P DATABASE HO√ÄN T·∫§T!';
PRINT '';
PRINT 'üìã TH√îNG TIN ƒêƒÇNG NH·∫¨P M·∫™U:';
PRINT '   üìß Email: nguoidung@vidu.com';
PRINT '   üîë M·∫≠t kh·∫©u: 123456';
PRINT '';
PRINT 'üìä TH·ªêNG K√ä DATABASE:';

-- ƒê·∫øm v√† hi·ªÉn th·ªã s·ªë l∆∞·ª£ng records
DECLARE @UserCount INT, @CategoryCount INT, @TransactionCount INT, @BudgetCount INT, @SettingCount INT, @NotificationCount INT;

SELECT @UserCount = COUNT(*) FROM Users;
SELECT @CategoryCount = COUNT(*) FROM Categories;
SELECT @TransactionCount = COUNT(*) FROM Transactions;
SELECT @BudgetCount = COUNT(*) FROM Budgets;
SELECT @SettingCount = COUNT(*) FROM UserSettings;
SELECT @NotificationCount = COUNT(*) FROM Notifications;

PRINT '   - Users: ' + CAST(@UserCount AS NVARCHAR);
PRINT '   - Categories: ' + CAST(@CategoryCount AS NVARCHAR);
PRINT '   - Transactions: ' + CAST(@TransactionCount AS NVARCHAR);
PRINT '   - Budgets: ' + CAST(@BudgetCount AS NVARCHAR);
PRINT '   - UserSettings: ' + CAST(@SettingCount AS NVARCHAR);
PRINT '   - Notifications: ' + CAST(@NotificationCount AS NVARCHAR);
PRINT '';
PRINT 'üöÄ S·∫¥N S√ÄNG S·ª¨ D·ª§NG PERSONAL FINANCE MANAGER!';
PRINT 'üë§ T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch';
PRINT 'üìÖ Ho√†n th√†nh: ' + CONVERT(NVARCHAR, GETDATE(), 120);
PRINT '';
PRINT 'üîó TH√îNG TIN K·∫æT N·ªêI:';
PRINT '   Server: TIEUNHATBACH\TIEUNHATBACH';
PRINT '   Database: PersonalFinanceDB';
PRINT '   Login: sa / Password: 123456';
PRINT '';
PRINT 'üéØ Ch·ªâ c·∫ßn ch·∫°y file n√†y l√† c√≥ th·ªÉ s·ª≠ d·ª•ng ngay!';
PRINT 'üìñ ƒê·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng:';
PRINT '   Backend: cd backend && npm run dev';
PRINT '   Frontend: cd frontend && npm run dev';
PRINT '';
PRINT 'üíé B·∫£n quy·ªÅn thu·ªôc v·ªÅ Ti·ªÉu Nh·∫•t B·∫°ch';

-- End of script
