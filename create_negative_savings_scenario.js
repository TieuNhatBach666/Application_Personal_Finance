const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

// Test user credentials
const testUser = {
    email: 'testbudget2@example.com',
    password: 'Test123456'
};

let authToken = '';
let categoryIds = {};

async function makeRequest(method, endpoint, data = null, useAuth = false) {
    try {
        const config = {
            method,
            url: `${BASE_URL}${endpoint}`,
            headers: {
                'Content-Type': 'application/json',
            },
        };

        if (useAuth && authToken) {
            config.headers['Authorization'] = `Bearer ${authToken}`;
        }

        if (data) {
            config.data = data;
        }

        const response = await axios(config);
        return { success: true, data: response.data, status: response.status };
    } catch (error) {
        return {
            success: false,
            error: error.response?.data?.message || error.message,
            status: error.response?.status || 500,
        };
    }
}

async function login() {
    console.log('üîë ƒêƒÉng nh·∫≠p...');
    
    const result = await makeRequest('POST', '/auth/login', {
        email: testUser.email,
        password: testUser.password
    });
    
    if (result.success) {
        console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');
        authToken = result.data.data?.accessToken || result.data.data?.token || result.data.accessToken || result.data.token;
        return true;
    } else {
        console.log('‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i:', result.error);
        return false;
    }
}

async function getCategories() {
    const result = await makeRequest('GET', '/categories', null, true);
    
    if (result.success) {
        const categories = result.data.data;
        categories.forEach(cat => {
            categoryIds[cat.name] = cat.id;
        });
        return true;
    }
    return false;
}

async function clearAllTransactions() {
    console.log('üóëÔ∏è X√≥a t·∫•t c·∫£ giao d·ªãch c≈©...');

    // Get all transactions
    const result = await makeRequest('GET', '/transactions', null, true);

    if (result.success && result.data.data && Array.isArray(result.data.data)) {
        const transactions = result.data.data;
        console.log(`   T√¨m th·∫•y ${transactions.length} giao d·ªãch c·∫ßn x√≥a`);

        for (const transaction of transactions) {
            await makeRequest('DELETE', `/transactions/${transaction.ID || transaction.id}`, null, true);
        }

        console.log('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ giao d·ªãch c≈©');
    } else {
        console.log('   Kh√¥ng c√≥ giao d·ªãch n√†o ƒë·ªÉ x√≥a');
    }
}

async function createNegativeSavingsScenario() {
    console.log('\nüí∏ T·∫†O T√åNH HU·ªêNG TI·∫æT KI·ªÜM √ÇM');
    console.log('===============================');
    
    // T·∫°o thu nh·∫≠p th·∫•p
    const income = {
        description: 'L∆∞∆°ng part-time',
        amount: 3000000, // 3 tri·ªáu
        type: 'Income',
        categoryId: categoryIds['L∆∞∆°ng'],
        transactionDate: new Date().toISOString().split('T')[0]
    };
    
    console.log('üí∞ Thu nh·∫≠p:', income.amount.toLocaleString('vi-VN'), 'VND');
    await makeRequest('POST', '/transactions', income, true);
    
    // T·∫°o chi ti√™u cao h∆°n thu nh·∫≠p
    const expenses = [
        { description: 'Ti·ªÅn nh√†', amount: 2500000, categoryName: 'Nh√† ·ªü' },
        { description: 'ƒÇn u·ªëng', amount: 800000, categoryName: 'ƒÇn u·ªëng' },
        { description: 'ƒêi l·∫°i', amount: 400000, categoryName: 'ƒêi l·∫°i' },
        { description: 'ƒêi·ªán tho·∫°i', amount: 200000, categoryName: 'H√≥a ƒë∆°n' },
        { description: 'Mua qu·∫ßn √°o', amount: 300000, categoryName: 'Qu·∫ßn √°o' },
    ];
    
    let totalExpense = 0;
    console.log('üí∏ Chi ti√™u:');
    for (const expense of expenses) {
        const expenseData = {
            description: expense.description,
            amount: expense.amount,
            type: 'Expense',
            categoryId: categoryIds[expense.categoryName],
            transactionDate: new Date().toISOString().split('T')[0]
        };
        
        await makeRequest('POST', '/transactions', expenseData, true);
        totalExpense += expense.amount;
        console.log(`   - ${expense.description}: ${expense.amount.toLocaleString('vi-VN')} VND`);
    }
    
    const netSavings = income.amount - totalExpense;
    
    console.log(`\nüìä K·∫æT QU·∫¢:`);
    console.log(`   Thu nh·∫≠p: ${income.amount.toLocaleString('vi-VN')} VND`);
    console.log(`   Chi ti√™u: ${totalExpense.toLocaleString('vi-VN')} VND`);
    console.log(`   Ti·∫øt ki·ªám: ${netSavings.toLocaleString('vi-VN')} VND`);
    
    if (netSavings < 0) {
        console.log('üö® TI·∫æT KI·ªÜM √ÇM - C·∫ßn c·∫£nh b√°o!');
        console.log(`   Thi·∫øu h·ª•t: ${Math.abs(netSavings).toLocaleString('vi-VN')} VND`);
    }
    
    // Ki·ªÉm tra API
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const now = new Date();
    const startDate = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().split('T')[0];
    const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString().split('T')[0];
    
    const summaryResult = await makeRequest('GET', `/statistics/overview?startDate=${startDate}&endDate=${endDate}`, null, true);
    
    if (summaryResult.success) {
        const summary = summaryResult.data.data;
        console.log(`\n‚úÖ X√°c nh·∫≠n t·ª´ API:`);
        console.log(`   Thu nh·∫≠p: ${summary.totalIncome?.toLocaleString('vi-VN')} VND`);
        console.log(`   Chi ti√™u: ${summary.totalExpense?.toLocaleString('vi-VN')} VND`);
        console.log(`   Ti·∫øt ki·ªám: ${summary.netSavings?.toLocaleString('vi-VN')} VND`);
        
        if (summary.netSavings < 0) {
            console.log('üéâ TH√ÄNH C√îNG: ƒê√£ t·∫°o t√¨nh hu·ªëng ti·∫øt ki·ªám √¢m!');
            console.log('üåê B√¢y gi·ªù h√£y m·ªü browser ƒë·ªÉ xem c·∫£nh b√°o tr√™n Dashboard v√† Statistics');
            return true;
        }
    }
    
    return false;
}

async function main() {
    console.log('üöÄ T·∫†O T√åNH HU·ªêNG TI·∫æT KI·ªÜM √ÇM ƒê·ªÇ TEST C·∫¢NH B√ÅO');
    console.log('================================================');
    console.log('Th·ªùi gian:', new Date().toLocaleTimeString('vi-VN'));
    
    // Step 1: Login
    const loginSuccess = await login();
    if (!loginSuccess) {
        console.log('\n‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p - d·ª´ng');
        return;
    }
    
    // Step 2: Get categories
    const categoriesSuccess = await getCategories();
    if (!categoriesSuccess) {
        console.log('\n‚ùå Kh√¥ng th·ªÉ l·∫•y danh m·ª•c - d·ª´ng');
        return;
    }
    
    // Step 3: Clear old data
    await clearAllTransactions();
    
    // Step 4: Create negative savings scenario
    const success = await createNegativeSavingsScenario();
    
    if (success) {
        console.log('\nüèÅ HO√ÄN TH√ÄNH');
        console.log('=============');
        console.log('‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng t√¨nh hu·ªëng ti·∫øt ki·ªám √¢m');
        console.log('üåê M·ªü http://localhost:5175 ƒë·ªÉ xem:');
        console.log('   - Dashboard: Th·∫ª "Ti·∫øt ki·ªám th√°ng n√†y" m√†u ƒë·ªè v·ªõi icon c·∫£nh b√°o');
        console.log('   - Dashboard: Banner c·∫£nh b√°o chi ti√™u v∆∞·ª£t thu nh·∫≠p');
        console.log('   - Statistics: T∆∞∆°ng t·ª± v·ªõi c·∫£nh b√°o v√† g·ª£i √Ω');
        console.log('   - Budget: C·∫£nh b√°o v∆∞·ª£t ng√¢n s√°ch (n·∫øu c√≥)');
    } else {
        console.log('\n‚ùå Kh√¥ng th·ªÉ t·∫°o t√¨nh hu·ªëng ti·∫øt ki·ªám √¢m');
    }
}

main().catch(console.error);
