/**
 * Export Service - Xu·∫•t b√°o c√°o d∆∞·ªõi nhi·ªÅu ƒë·ªãnh d·∫°ng
 * T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch
 */

import * as XLSX from 'xlsx';

export interface ReportData {
  title: string;
  period: string;
  dateRange: string;
  summary: {
    totalIncome: number;
    totalExpense: number;
    netSavings: number;
    transactionCount: number;
  };
  categoryBreakdown: Array<{
    category: string;
    amount: number;
    percentage: number;
  }>;
  generatedAt: string;
  generatedBy: string;
}

/**
 * Xu·∫•t b√°o c√°o d∆∞·ªõi ƒë·ªãnh d·∫°ng JSON
 */
export const exportToJSON = (data: ReportData, filename: string) => {
  try {
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    downloadFile(dataBlob, `${filename}.json`);
    console.log('üìä JSON report exported successfully');
  } catch (error) {
    console.error('‚ùå Failed to export JSON:', error);
    throw new Error('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o JSON');
  }
};

/**
 * Xu·∫•t b√°o c√°o d∆∞·ªõi ƒë·ªãnh d·∫°ng CSV
 */
export const exportToCSV = (data: ReportData, filename: string) => {
  try {
    let csvContent = '';
    
    // Header
    csvContent += `B√°o C√°o Th·ªëng K√™,${data.title}\n`;
    csvContent += `Th·ªùi gian,${data.period}\n`;
    csvContent += `Kho·∫£ng th·ªùi gian,${data.dateRange}\n`;
    csvContent += `T·∫°o l√∫c,${data.generatedAt}\n`;
    csvContent += `T·∫°o b·ªüi,${data.generatedBy}\n\n`;
    
    // Summary
    csvContent += `T·ªîNG QUAN\n`;
    csvContent += `T·ªïng thu nh·∫≠p,${data.summary.totalIncome}\n`;
    csvContent += `T·ªïng chi ti√™u,${data.summary.totalExpense}\n`;
    csvContent += `Ti·∫øt ki·ªám r√≤ng,${data.summary.netSavings}\n`;
    csvContent += `S·ªë giao d·ªãch,${data.summary.transactionCount}\n\n`;
    
    // Category breakdown
    csvContent += `CHI TI·∫æT THEO DANH M·ª§C\n`;
    csvContent += `Danh m·ª•c,S·ªë ti·ªÅn,Ph·∫ßn trƒÉm\n`;
    data.categoryBreakdown.forEach(cat => {
      csvContent += `${cat.category},${cat.amount},${cat.percentage}%\n`;
    });
    
    const dataBlob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    downloadFile(dataBlob, `${filename}.csv`);
    console.log('üìä CSV report exported successfully');
  } catch (error) {
    console.error('‚ùå Failed to export CSV:', error);
    throw new Error('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o CSV');
  }
};

/**
 * Xu·∫•t b√°o c√°o d∆∞·ªõi ƒë·ªãnh d·∫°ng Excel XLSX
 */
export const exportToExcel = (data: ReportData, filename: string) => {
  try {
    // T·∫°o workbook m·ªõi
    const wb = XLSX.utils.book_new();
    
    // Sheet 1: T·ªïng quan
    const summaryData = [
      ['B√ÅO C√ÅO TH·ªêNG K√ä T√ÄI CH√çNH'],
      [''],
      ['Ti√™u ƒë·ªÅ:', data.title],
      ['Th·ªùi gian:', data.period],
      ['Kho·∫£ng th·ªùi gian:', data.dateRange],
      ['T·∫°o l√∫c:', data.generatedAt],
      ['T·∫°o b·ªüi:', data.generatedBy],
      [''],
      ['T·ªîNG QUAN'],
      ['T·ªïng thu nh·∫≠p:', data.summary.totalIncome],
      ['T·ªïng chi ti√™u:', data.summary.totalExpense],
      ['Ti·∫øt ki·ªám r√≤ng:', data.summary.netSavings],
      ['S·ªë giao d·ªãch:', data.summary.transactionCount],
    ];
    
    const wsSummary = XLSX.utils.aoa_to_sheet(summaryData);
    
    // ƒê·ªãnh d·∫°ng c·ªôt
    wsSummary['!cols'] = [
      { wch: 25 }, // Column A
      { wch: 20 }  // Column B
    ];
    
    XLSX.utils.book_append_sheet(wb, wsSummary, 'T·ªïng Quan');
    
    // Sheet 2: Chi ti·∫øt theo danh m·ª•c
    const categoryHeaders = ['Danh m·ª•c', 'S·ªë ti·ªÅn', 'Ph·∫ßn trƒÉm (%)'];
    const categoryRows = data.categoryBreakdown.map(cat => [
      cat.category,
      cat.amount,
      cat.percentage
    ]);
    
    const categoryData = [categoryHeaders, ...categoryRows];
    const wsCategory = XLSX.utils.aoa_to_sheet(categoryData);
    
    // ƒê·ªãnh d·∫°ng c·ªôt cho sheet danh m·ª•c
    wsCategory['!cols'] = [
      { wch: 30 }, // Danh m·ª•c
      { wch: 20 }, // S·ªë ti·ªÅn
      { wch: 15 }  // Ph·∫ßn trƒÉm
    ];
    
    XLSX.utils.book_append_sheet(wb, wsCategory, 'Chi Ti·∫øt Danh M·ª•c');
    
    // Xu·∫•t file
    XLSX.writeFile(wb, `${filename}.xlsx`);
    console.log('üìä Excel report exported successfully');
  } catch (error) {
    console.error('‚ùå Failed to export Excel:', error);
    throw new Error('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o Excel');
  }
};

/**
 * Xu·∫•t b√°o c√°o d∆∞·ªõi ƒë·ªãnh d·∫°ng HTML (c√≥ th·ªÉ in th√†nh PDF)
 */
export const exportToHTML = (data: ReportData, filename: string) => {
  try {
    const htmlContent = `
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${data.title}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 40px;
            color: #333;
            line-height: 1.6;
        }
        .header {
            text-align: center;
            border-bottom: 3px solid #3498db;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #2c3e50;
            margin: 0;
            font-size: 2.5em;
        }
        .header p {
            color: #7f8c8d;
            margin: 5px 0;
            font-size: 1.1em;
        }
        .summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        .summary-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .summary-card h3 {
            margin: 0 0 10px 0;
            color: #495057;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        .summary-card .value {
            font-size: 1.8em;
            font-weight: bold;
            color: #2c3e50;
        }
        .income { border-left: 5px solid #27ae60; }
        .expense { border-left: 5px solid #e74c3c; }
        .savings { border-left: 5px solid #3498db; }
        .transactions { border-left: 5px solid #f39c12; }
        
        .breakdown {
            margin-top: 40px;
        }
        .breakdown h2 {
            color: #2c3e50;
            border-bottom: 2px solid #ecf0f1;
            padding-bottom: 10px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ecf0f1;
        }
        th {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        tr:hover {
            background-color: #f8f9fa;
        }
        .footer {
            margin-top: 50px;
            text-align: center;
            color: #7f8c8d;
            font-size: 0.9em;
            border-top: 1px solid #ecf0f1;
            padding-top: 20px;
        }
        @media print {
            body { margin: 20px; }
            .summary { grid-template-columns: repeat(2, 1fr); }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>${data.title}</h1>
        <p><strong>Th·ªùi gian:</strong> ${data.period}</p>
        <p><strong>Kho·∫£ng th·ªùi gian:</strong> ${data.dateRange}</p>
        <p><strong>T·∫°o l√∫c:</strong> ${data.generatedAt}</p>
    </div>

    <div class="summary">
        <div class="summary-card income">
            <h3>T·ªïng Thu Nh·∫≠p</h3>
            <div class="value">${data.summary.totalIncome.toLocaleString('vi-VN')} ‚Ç´</div>
        </div>
        <div class="summary-card expense">
            <h3>T·ªïng Chi Ti√™u</h3>
            <div class="value">${data.summary.totalExpense.toLocaleString('vi-VN')} ‚Ç´</div>
        </div>
        <div class="summary-card savings">
            <h3>Ti·∫øt Ki·ªám R√≤ng</h3>
            <div class="value">${data.summary.netSavings.toLocaleString('vi-VN')} ‚Ç´</div>
        </div>
        <div class="summary-card transactions">
            <h3>S·ªë Giao D·ªãch</h3>
            <div class="value">${data.summary.transactionCount}</div>
        </div>
    </div>

    <div class="breakdown">
        <h2>üìä Chi Ti·∫øt Theo Danh M·ª•c</h2>
        <table>
            <thead>
                <tr>
                    <th>Danh M·ª•c</th>
                    <th>S·ªë Ti·ªÅn</th>
                    <th>Ph·∫ßn TrƒÉm</th>
                </tr>
            </thead>
            <tbody>
                ${data.categoryBreakdown.map(cat => `
                    <tr>
                        <td>${cat.category}</td>
                        <td>${cat.amount.toLocaleString('vi-VN')} ‚Ç´</td>
                        <td>${cat.percentage.toFixed(1)}%</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    </div>

    <div class="footer">
        <p>¬© 2025 ${data.generatedBy} - T√°c gi·∫£: Ti·ªÉu Nh·∫•t B·∫°ch</p>
        <p>B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø c·ªßa b·∫°n</p>
    </div>
</body>
</html>`;

    const dataBlob = new Blob([htmlContent], { type: 'text/html;charset=utf-8;' });
    downloadFile(dataBlob, `${filename}.html`);
    console.log('üìä HTML report exported successfully');
  } catch (error) {
    console.error('‚ùå Failed to export HTML:', error);
    throw new Error('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o HTML');
  }
};

/**
 * Helper function ƒë·ªÉ download file
 */
const downloadFile = (blob: Blob, filename: string) => {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

/**
 * Xu·∫•t b√°o c√°o v·ªõi nhi·ªÅu l·ª±a ch·ªçn ƒë·ªãnh d·∫°ng
 */
export const exportReport = async (
  data: ReportData, 
  format: 'json' | 'csv' | 'excel' | 'html' = 'json',
  customFilename?: string
) => {
  const timestamp = new Date().toISOString().split('T')[0];
  const filename = customFilename || `bao-cao-thong-ke-${data.period.toLowerCase()}-${timestamp}`;
  
  try {
    switch (format) {
      case 'excel':
        exportToExcel(data, filename);
        break;
      case 'csv':
        exportToCSV(data, filename);
        break;
      case 'html':
        exportToHTML(data, filename);
        break;
      case 'json':
      default:
        exportToJSON(data, filename);
        break;
    }
  } catch (error) {
    console.error('‚ùå Export failed:', error);
    throw error;
  }
};
