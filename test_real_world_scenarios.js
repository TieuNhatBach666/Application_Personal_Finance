const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

// Test user credentials
const testUser = {
    email: 'testbudget2@example.com',
    password: 'Test123456'
};

let authToken = '';
let testUserId = '';
let categoryIds = {};

async function makeRequest(method, endpoint, data = null, useAuth = false) {
    try {
        const config = {
            method,
            url: `${BASE_URL}${endpoint}`,
            headers: {
                'Content-Type': 'application/json',
            },
        };

        if (useAuth && authToken) {
            config.headers['Authorization'] = `Bearer ${authToken}`;
        }

        if (data) {
            config.data = data;
        }

        const response = await axios(config);
        return { success: true, data: response.data, status: response.status };
    } catch (error) {
        return {
            success: false,
            error: error.response?.data?.message || error.message,
            status: error.response?.status || 500,
        };
    }
}

async function login() {
    console.log('üîë ƒêƒÉng nh·∫≠p...');
    
    const result = await makeRequest('POST', '/auth/login', {
        email: testUser.email,
        password: testUser.password
    });
    
    if (result.success) {
        console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');
        testUserId = result.data.data?.user?.id || result.data.user?.id;
        authToken = result.data.data?.accessToken || result.data.data?.token || result.data.accessToken || result.data.token;
        return true;
    } else {
        console.log('‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i:', result.error);
        return false;
    }
}

async function getCategories() {
    console.log('\nüìÇ L·∫•y danh s√°ch danh m·ª•c...');
    
    const result = await makeRequest('GET', '/categories', null, true);
    
    if (result.success) {
        const categories = result.data.data;
        console.log(`‚úÖ T√¨m th·∫•y ${categories.length} danh m·ª•c`);
        
        // Map category names to IDs
        categories.forEach(cat => {
            categoryIds[cat.name] = cat.id;
        });
        
        return true;
    } else {
        console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y danh m·ª•c:', result.error);
        return false;
    }
}

async function testScenario1_NegativeSavings() {
    console.log('\nüî¥ SCENARIO 1: CHI TI√äU > THU NH·∫¨P (TI·∫æT KI·ªÜM √ÇM)');
    console.log('=================================================');
    
    // T·∫°o giao d·ªãch thu nh·∫≠p th·∫•p
    const lowIncome = {
        description: 'Thu nh·∫≠p th·∫•p th√°ng n√†y',
        amount: 5000000, // 5 tri·ªáu
        type: 'Income',
        categoryId: categoryIds['L∆∞∆°ng'],
        transactionDate: new Date().toISOString().split('T')[0]
    };
    
    // T·∫°o chi ti√™u cao
    const highExpenses = [
        { description: 'Ti·ªÅn nh√†', amount: 3000000, categoryName: 'Nh√† ·ªü' },
        { description: 'ƒÇn u·ªëng', amount: 1500000, categoryName: 'ƒÇn u·ªëng' },
        { description: 'ƒêi l·∫°i', amount: 800000, categoryName: 'ƒêi l·∫°i' },
        { description: 'Mua s·∫Øm', amount: 1200000, categoryName: 'Mua s·∫Øm' },
    ];
    
    console.log('üí∞ T·∫°o thu nh·∫≠p th·∫•p:', lowIncome.amount.toLocaleString('vi-VN'), 'VND');
    await makeRequest('POST', '/transactions', lowIncome, true);
    
    console.log('üí∏ T·∫°o chi ti√™u cao:');
    let totalExpense = 0;
    for (const expense of highExpenses) {
        const expenseData = {
            description: expense.description,
            amount: expense.amount,
            type: 'Expense',
            categoryId: categoryIds[expense.categoryName],
            transactionDate: new Date().toISOString().split('T')[0]
        };
        
        await makeRequest('POST', '/transactions', expenseData, true);
        totalExpense += expense.amount;
        console.log(`   - ${expense.description}: ${expense.amount.toLocaleString('vi-VN')} VND`);
    }
    
    console.log(`\nüìä K·∫øt qu·∫£ d·ª± ki·∫øn:`);
    console.log(`   Thu nh·∫≠p: ${lowIncome.amount.toLocaleString('vi-VN')} VND`);
    console.log(`   Chi ti√™u: ${totalExpense.toLocaleString('vi-VN')} VND`);
    console.log(`   Ti·∫øt ki·ªám: ${(lowIncome.amount - totalExpense).toLocaleString('vi-VN')} VND (√ÇM)`);
    
    // Ki·ªÉm tra summary
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const now = new Date();
    const startDate = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().split('T')[0];
    const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString().split('T')[0];
    
    const summaryResult = await makeRequest('GET', `/transactions/summary?startDate=${startDate}&endDate=${endDate}`, null, true);
    
    if (summaryResult.success) {
        const summary = summaryResult.data.data;
        console.log(`\n‚úÖ K·∫øt qu·∫£ th·ª±c t·∫ø t·ª´ API:`);
        console.log(`   Thu nh·∫≠p: ${summary.totalIncome?.toLocaleString('vi-VN')} VND`);
        console.log(`   Chi ti√™u: ${summary.totalExpense?.toLocaleString('vi-VN')} VND`);
        console.log(`   Ti·∫øt ki·ªám: ${summary.netSavings?.toLocaleString('vi-VN')} VND`);
        
        if (summary.netSavings < 0) {
            console.log('üö® C·∫¢NH B√ÅO: Ti·∫øt ki·ªám √¢m - C·∫ßn c·∫£i thi·ªán!');
            return { hasNegativeSavings: true, netSavings: summary.netSavings };
        }
    }
    
    return { hasNegativeSavings: false };
}

async function testScenario2_BudgetOverspend() {
    console.log('\nüî¥ SCENARIO 2: V∆Ø·ª¢T NG√ÇN S√ÅCH');
    console.log('==============================');
    
    // T·∫°o ng√¢n s√°ch nh·ªè
    const budgetData = {
        name: 'Ng√¢n s√°ch ƒÉn u·ªëng test',
        categoryId: categoryIds['ƒÇn u·ªëng'],
        totalAmount: 500000, // 500k
        period: 'monthly',
        warningThreshold: 80,
        color: '#e74c3c'
    };
    
    console.log('üí∞ T·∫°o ng√¢n s√°ch:', budgetData.totalAmount.toLocaleString('vi-VN'), 'VND');
    const budgetResult = await makeRequest('POST', '/budgets', budgetData, true);
    
    if (budgetResult.success) {
        console.log('‚úÖ Ng√¢n s√°ch ƒë√£ t·∫°o');
        
        // T·∫°o chi ti√™u v∆∞·ª£t ng√¢n s√°ch
        const overspendTransactions = [
            { description: 'ƒÇn s√°ng 1', amount: 200000 },
            { description: 'ƒÇn tr∆∞a 1', amount: 250000 },
            { description: 'ƒÇn t·ªëi 1', amount: 300000 }, // T·ªïng = 750k > 500k
        ];
        
        console.log('üí∏ T·∫°o chi ti√™u v∆∞·ª£t ng√¢n s√°ch:');
        let totalSpent = 0;
        for (const transaction of overspendTransactions) {
            const transactionData = {
                description: transaction.description,
                amount: transaction.amount,
                type: 'Expense',
                categoryId: categoryIds['ƒÇn u·ªëng'],
                transactionDate: new Date().toISOString().split('T')[0]
            };
            
            await makeRequest('POST', '/transactions', transactionData, true);
            totalSpent += transaction.amount;
            console.log(`   - ${transaction.description}: ${transaction.amount.toLocaleString('vi-VN')} VND`);
            
            // Delay ƒë·ªÉ th·∫•y progression
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        console.log(`\nüìä K·∫øt qu·∫£:`);
        console.log(`   Ng√¢n s√°ch: ${budgetData.totalAmount.toLocaleString('vi-VN')} VND`);
        console.log(`   ƒê√£ chi: ${totalSpent.toLocaleString('vi-VN')} VND`);
        console.log(`   V∆∞·ª£t: ${(totalSpent - budgetData.totalAmount).toLocaleString('vi-VN')} VND`);
        console.log(`   T·ª∑ l·ªá: ${((totalSpent / budgetData.totalAmount) * 100).toFixed(1)}%`);
        
        return { budgetExceeded: true, overspendAmount: totalSpent - budgetData.totalAmount };
    }
    
    return { budgetExceeded: false };
}

async function testScenario3_CheckBudgetSummary() {
    console.log('\nüîç SCENARIO 3: KI·ªÇM TRA T·ªîNG QUAN NG√ÇN S√ÅCH');
    console.log('===========================================');
    
    const summaryResult = await makeRequest('GET', '/budgets/summary/current', null, true);
    
    if (summaryResult.success) {
        const summary = summaryResult.data.data;
        console.log('‚úÖ T·ªïng quan ng√¢n s√°ch:');
        console.log(`   T·ªïng s·ªë ng√¢n s√°ch: ${summary.totalBudgets}`);
        console.log(`   T·ªïng ng√¢n s√°ch: ${summary.totalBudgetAmount?.toLocaleString('vi-VN')} VND`);
        console.log(`   T·ªïng ƒë√£ chi: ${summary.totalSpentAmount?.toLocaleString('vi-VN')} VND`);
        console.log(`   T·ª∑ l·ªá s·ª≠ d·ª•ng: ${summary.averageUsagePercentage?.toFixed(1)}%`);
        console.log(`   Ng√¢n s√°ch g·∫ßn v∆∞·ª£t: ${summary.budgetsNearLimit}`);
        
        if (summary.totalBudgetAmount === 0) {
            console.log('üö® V·∫§N ƒê·ªÄ: T·ªïng ng√¢n s√°ch = 0 - C·∫ßn ki·ªÉm tra!');
            return { totalBudgetZero: true };
        }
        
        return { totalBudgetZero: false, summary };
    } else {
        console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y t·ªïng quan ng√¢n s√°ch:', summaryResult.error);
        return { error: true };
    }
}

async function main() {
    console.log('üöÄ KI·ªÇM TRA C√ÅC T√åNH HU·ªêNG TH·ª∞C T·∫æ');
    console.log('==================================');
    console.log('Th·ªùi gian:', new Date().toLocaleTimeString('vi-VN'));
    
    // Step 1: Login
    const loginSuccess = await login();
    if (!loginSuccess) {
        console.log('\n‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p - d·ª´ng test');
        return;
    }
    
    // Step 2: Get categories
    const categoriesSuccess = await getCategories();
    if (!categoriesSuccess) {
        console.log('\n‚ùå Kh√¥ng th·ªÉ l·∫•y danh m·ª•c - d·ª´ng test');
        return;
    }
    
    // Step 3: Test scenarios
    const scenario1 = await testScenario1_NegativeSavings();
    const scenario2 = await testScenario2_BudgetOverspend();
    const scenario3 = await testScenario3_CheckBudgetSummary();
    
    console.log('\nüèÅ T√ìM T·∫ÆT K·∫æT QU·∫¢');
    console.log('==================');
    
    if (scenario1.hasNegativeSavings) {
        console.log('üî¥ Ti·∫øt ki·ªám √¢m:', scenario1.netSavings?.toLocaleString('vi-VN'), 'VND');
        console.log('   ‚û°Ô∏è C·∫ßn th√™m c·∫£nh b√°o v√† g·ª£i √Ω c·∫£i thi·ªán');
    }
    
    if (scenario2.budgetExceeded) {
        console.log('üî¥ V∆∞·ª£t ng√¢n s√°ch:', scenario2.overspendAmount?.toLocaleString('vi-VN'), 'VND');
        console.log('   ‚û°Ô∏è C·∫ßn th√¥ng b√°o c·∫£nh b√°o r√µ r√†ng h∆°n');
    }
    
    if (scenario3.totalBudgetZero) {
        console.log('üî¥ T·ªïng ng√¢n s√°ch = 0');
        console.log('   ‚û°Ô∏è C·∫ßn s·ª≠a logic t√≠nh to√°n');
    }
    
    console.log('\nüìã DANH S√ÅCH C·∫¢I THI·ªÜN C·∫¶N THI·∫æT:');
    console.log('1. Th√™m c·∫£nh b√°o khi ti·∫øt ki·ªám √¢m');
    console.log('2. C·∫£i thi·ªán UI cho s·ªë √¢m (m√†u ƒë·ªè, icon c·∫£nh b√°o)');
    console.log('3. S·ª≠a bug t·ªïng ng√¢n s√°ch = 0');
    console.log('4. Th√™m g·ª£i √Ω c·∫£i thi·ªán t√†i ch√≠nh');
    console.log('5. Th√™m th√¥ng b√°o push khi v∆∞·ª£t ng√¢n s√°ch');
}

main().catch(console.error);
